<?php
namespace gamboamartin\comercial\models;

use base\orm\_modelo_parent;
use gamboamartin\cat_sat\models\cat_sat_producto;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class com_tmp_prod_cs extends _modelo_parent{

    public function __construct(PDO $link, array $childrens = array()){
        $this->es_sincronizable = true;
        $tabla = 'com_tmp_prod_cs';
        $columnas = array($tabla=>false,'com_producto'=>$tabla,'cat_sat_producto'=>$tabla);
        $campos_obligatorios = array();
        $childrens = array();
        $columnas_extra = array();

        $campos_view['com_producto_id'] = array('type' => 'selects', 'model' => new com_producto($link));
        $campos_view['cat_sat_producto_id'] = array('type' => 'selects', 'model' => new cat_sat_producto($link));
        $campos_view['cat_sat_producto'] = array('type' => 'inputs');

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, campos_view: $campos_view, columnas_extra: $columnas_extra, childrens: $childrens);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Temporales Prod';

    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $keys_init[] = 'cat_sat_producto';

        foreach ($keys_init as $key){
            if(!isset($this->registro[$key]) || trim($this->registro[$key]) === ''){
                $this->registro[$key] = 'PENDIENTE';
            }
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->registro['com_producto_id'].' ';

            foreach ($keys_init as $key){
                $descripcion .= $this->registro[$key].' ';
            }


            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    /**
     * Asigna el id del producto del sat para producto comercial
     * @param array $filtro filtro a integrar
     * @param array $tmp_upd arreglo previo para actualizacion
     * @return array
     */
    private function asigna_cat_sat_producto(array $filtro, array $tmp_upd): array
    {
        $r_cat_sat_producto = (new cat_sat_producto(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $r_cat_sat_producto);
        }
        $cat_sat_producto_id = $r_cat_sat_producto->registros[0]['cat_sat_producto_id'];
        $tmp_upd['cat_sat_producto_id'] = $cat_sat_producto_id;
        return $tmp_upd;
    }




    /**
     * Verifica si existe le producto del sat en base de datos conforme al filtro
     * @param array $filtro filtro para integracion
     * @param array $tmp_upd arreglo previamente cargado para la actualizacion del producto
     * @return array
     */
    private function integra_cat_sat_producto(array $filtro, array $tmp_upd): array
    {
        $existe_cat_sat_producto = (new cat_sat_producto(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $existe_cat_sat_producto);
        }
        if($existe_cat_sat_producto){
            $tmp_upd = $this->asigna_cat_sat_producto(filtro: $filtro, tmp_upd: $tmp_upd);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
            }
        }
        return $tmp_upd;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $entidades = array();
        $entidades['cat_sat_producto'] = new cat_sat_producto(link: $this->link);

        foreach ($entidades as $entidad){
            $key_id = $entidad->tabla.'_id';
            $key_codigo = $entidad->tabla.'_codigo';

            if(isset($registro[$key_id]) && (int)$registro[$key_id] > 1){
                $row_cat_sat = $entidad->registro(registro_id: $registro[$key_id]);
                if(errores::$error){
                    return $this->error->error(mensaje: 'Error al obtener row_dp',data:  $row_cat_sat);
                }
                $registro[$entidad->tabla] = $row_cat_sat[$key_codigo];
            }
        }


        $r_modifica_bd = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al r_modifica_bd',data:  $r_modifica_bd);
        }
        return $r_modifica_bd;
    }




}