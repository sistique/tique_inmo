<?php
namespace gamboamartin\comercial\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class com_conf_precio extends _modelo_parent{

    public function __construct(PDO $link, array $childrens = array()){
        $tabla = 'com_conf_precio';
        $columnas = array($tabla=>false,'com_producto'=>$tabla,'com_tipo_cliente'=>$tabla);
        $campos_obligatorios = array('com_producto_id','com_tipo_cliente_id');
        $tipo_campos = array();
        $atributos_criticos[] = 'com_producto_id';
        $atributos_criticos[] = 'com_tipo_cliente_id';
        $atributos_criticos[] = 'precio';


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, tipo_campos: $tipo_campos, childrens: $childrens,
            atributos_criticos: $atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Precios por tipo';

    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $com_producto = (new com_producto(link: $this->link))->registro(registro_id: $this->registro['com_producto_id'],
            columnas_en_bruto: true,retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener producto',data:  $com_producto);
        }
        $com_tipo_cliente = (new com_tipo_cliente(link: $this->link))->registro(registro_id: $this->registro['com_tipo_cliente_id'],
            columnas_en_bruto: true,retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener producto',data:  $com_producto);
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $com_producto->descripcion.' '.$com_tipo_cliente->descripcion;
            $this->registro['descripcion'] = $descripcion;
        }

        $registro = $this->integra_codigo();
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al al integrar codigo', data: $registro);
        }
        $filtro['com_producto.id'] = $this->registro['com_producto_id'];
        $filtro['com_tipo_cliente.id'] = $this->registro['com_tipo_cliente_id'];
        $existe = (new com_conf_precio(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar',data:  $existe);
        }

        if($existe){
            $r_com_con_precio = (new com_conf_precio(link: $this->link))->filtro_and(filtro: $filtro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener registro',data:  $r_com_con_precio);
            }
            if($r_com_con_precio->n_registros === 0){
                return $this->error->error(mensaje: 'Error no existe registro',data:  $r_com_con_precio);
            }
            if($r_com_con_precio->n_registros > 1){
                return $this->error->error(mensaje: 'Error existe mas de un registro',data:  $r_com_con_precio);
            }

            $this->registro_id = $r_com_con_precio->registros[0]['com_con_precio_id'];


            $r_alta_bd = new stdClass();
            $r_alta_bd->mensaje = "Registro existente previamente";
            $r_alta_bd->registro_id = $this->registro_id;
            $r_alta_bd->sql = 'NO SE EJECUTO TRANSACCION YA EXISTIA EL REGISTRO';
            $r_alta_bd->registro = $r_com_con_precio->registros[0];
            $r_alta_bd->registro_obj = (object)$r_com_con_precio->registros[0];
            $r_alta_bd->registro_ins = $this->registro;
            $r_alta_bd->campos = $this->campos_tabla;
        }
        else{
            $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al dar de alta correo',data:  $r_alta_bd);
            }
        }



        return $r_alta_bd;
    }

    /**
     * Genera un codigo aleatorio
     * @param string $descripcion Descripcion de registro
     * @return array|string
     */
    private function codigo(string $descripcion): array|string
    {
        $descripcion = trim($descripcion);
        $rand = mt_rand(10000, 99999);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al al integrar rand', data: $rand);
        }
        return trim($descripcion.$rand);
    }

    /**
     * Integra el codigo default
     * @return array
     *
     */
    private function integra_codigo(): array
    {
        $keys = array('descripcion');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $this->registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }

        if(!isset($this->registro['codigo'])) {

            $codigo = $this->codigo(descripcion: $this->registro['descripcion']);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al al integrar codigo', data: $codigo);
            }
            $this->registro['codigo'] = $codigo;
        }
        return $this->registro;
    }



}