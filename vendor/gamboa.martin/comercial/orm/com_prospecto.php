<?php
namespace gamboamartin\comercial\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use gamboamartin\proceso\models\pr_etapa_proceso;
use PDO;
use stdClass;

class com_prospecto extends _modelo_parent{
    public function __construct(PDO $link, array $childrens = array()){
        $tabla = 'com_prospecto';
        $columnas = array($tabla=>false,'com_tipo_prospecto'=>$tabla,'com_agente'=>$tabla,
            'com_tipo_agente'=>'com_agente');
        $campos_obligatorios = array('com_tipo_prospecto_id','com_agente_id');

        $columnas_extra = array();

        $atributos_criticos = array('nombre','apellido_paterno','apellido_materno','telefono','correo','razon_social',
            'com_tipo_prospecto_id','com_agente_id');

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, childrens: $childrens,
            atributos_criticos: $atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Prospectos';


    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        $keys = array('nombre','apellido_paterno');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data:  $valida);
        }

        if(!isset($this->registro['apellido_materno'])){
            $this->registro['apellido_materno'] = '';
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->descripcion(registro: $this->registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener descripcion',data:  $descripcion);
            }
            $this->registro['descripcion'] = $descripcion;
        }

        if(!isset($this->registro['com_medio_prospeccion_id'])){
            $filtro_medio['com_medio_prospeccion.predeterminado'] = 'activo';
            $r_medio_prospeccion = (new com_medio_prospeccion(link: $this->link))->filtro_and(filtro: $filtro_medio);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar',data:  $r_medio_prospeccion);
            }

            $this->registro['com_medio_prospeccion_id'] = $r_medio_prospeccion->registros[0]['com_medio_prospeccion_id'];
        }
        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }

        $alta_com_rel_agente = $this->inserta_com_rel_agente(com_agente_id:$r_alta_bd->registro_puro->com_agente_id,
            com_prospecto_id:$r_alta_bd->registro_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar alta_com_rel_agente',data:  $alta_com_rel_agente);
        }

        $filtro = array();
        $filtro['pr_proceso.descripcion'] = 'PROSPECCION';
        $filtro['pr_etapa.descripcion'] = 'ALTA';
        $filtro['adm_seccion.descripcion'] = $this->tabla;

        $existe = (new pr_etapa_proceso(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe',data:  $existe);
        }
        if(!$existe){
            return $this->error->error(mensaje: 'Error no existe etapa definida',data:  $filtro);
        }
        $r_pr_etapa_proceso = (new pr_etapa_proceso(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener etapa',data:  $r_pr_etapa_proceso);
        }

        $pr_etapa_proceso_id = $r_pr_etapa_proceso->registros[0]['pr_etapa_proceso_id'];

        $com_prospecto_etapa_ins['com_prospecto_id'] = $r_alta_bd->registro_id;
        $com_prospecto_etapa_ins['fecha'] = date('Y-m-d');
        $com_prospecto_etapa_ins['pr_etapa_proceso_id'] = $pr_etapa_proceso_id;

        $r_etapa = (new com_prospecto_etapa(link: $this->link))->alta_registro(registro:$com_prospecto_etapa_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar etapa',data:  $r_etapa);
        }

        return $r_alta_bd;
    }

    final public function com_cliente(int $com_prospecto_id)
    {
        $existe = $this->tiene_cliente(com_prospecto_id: $com_prospecto_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al verificar si existe cliente',data: $existe);
        }
        $filtro['com_prospecto.id'] = $com_prospecto_id;
        $r_com_rel_prospecto_cte = (new com_rel_prospecto_cte(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener relaciones',data: $r_com_rel_prospecto_cte);
        }
        if($r_com_rel_prospecto_cte->n_registros > 1){
            return $this->error->error(mensaje: 'Error hay un error de integridad',data: $r_com_rel_prospecto_cte);
        }
        return (object)$r_com_rel_prospecto_cte->rgeistros[0];

    }

    final public function com_cliente_id(int $com_prospecto_id)
    {
        $com_prospecto = $this->com_cliente(com_prospecto_id: $com_prospecto_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener com_prospecto',data: $com_prospecto_id);
        }
        return (int)$com_prospecto->com_cliente_id;
    }

    private function com_rel_agente_ins(int $com_agente_id, int $com_prospecto_id): array
    {
        $com_rel_agente_ins['com_prospecto_id'] = $com_prospecto_id;
        $com_rel_agente_ins['com_agente_id'] = $com_agente_id;
        return $com_rel_agente_ins;
    }

    final public function convierte_en_cliente(int $com_prospecto_id)
    {
        if($com_prospecto_id <= 0){
            return $this->error->error(mensaje: 'Error com_prospecto_id debe ser mayor a 0',data:  $com_prospecto_id);
        }
        $tiene_cliente = $this->tiene_cliente(com_prospecto_id: $com_prospecto_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al verificar prospecto',data:  $tiene_cliente);
        }
        if($tiene_cliente){
            return $this->error->error(mensaje: 'Error al verificar prospecto ya tiene un cliente relacionado',
                data:  $tiene_cliente);
        }

        $com_prospecto = $this->registro(registro_id: $com_prospecto_id,retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener prospecto',data:  $com_prospecto);
        }
        $telefono = trim($com_prospecto->com_prospecto_telefono);
        if($telefono === ''){
            return $this->error->error(mensaje: 'Error el telefono esta vacio',data:  $telefono);
        }
        $razon_social = trim($com_prospecto->com_prospecto_razon_social);
        if($razon_social === ''){
            return $this->error->error(mensaje: 'Error el razon_social esta vacio',data:  $razon_social);
        }

        //print_r($com_prospecto);

        $com_cliente_ins = array();
        $com_cliente_ins['cat_sat_moneda_id'] = 161;
        $com_cliente_ins['telefono'] = $telefono;
        $com_cliente_ins['numero_exterior'] = 'SN';
        $com_cliente_ins['razon_social'] = $razon_social;
        $com_cliente_ins['dp_municipio_id'] = 2469;
        $com_cliente_ins['cat_sat_metodo_pago_id'] = 2;
        $com_cliente_ins['cat_sat_tipo_persona_id'] = 5;
        $com_cliente_ins['rfc'] = 'XAXX010101000';

        $r_alta_com_cliente = (new com_cliente(link: $this->link))->alta_registro(registro: $com_cliente_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar cliente',data:  $r_alta_com_cliente);
        }

        $com_cliente_id = $r_alta_com_cliente->registro_id;

        $com_rel_prospecto_cte_ins['com_prospecto_id'] = $com_prospecto_id;
        $com_rel_prospecto_cte_ins['com_cliente_id'] = $com_cliente_id;

        $r_alta_com_rel_prospecto_cte = (new com_rel_prospecto_cte(link: $this->link))->alta_registro(
            registro: $com_rel_prospecto_cte_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar cliente',data:  $r_alta_com_rel_prospecto_cte);
        }

        $out = new stdClass();
        $out->com_rel_prospecto_cte =  $r_alta_com_rel_prospecto_cte;
        $out->com_cliente_id =  $r_alta_com_cliente;

        return $out;


    }

    /**
     * POR DOCUMENTAR EN WIKI
     * Returns a formatted description string based on the provided registration array.
     *
     * @param array $registro An array containing the registration information.
     *                       The array should have the following keys: 'nombre', 'apellido_paterno', 'apellido_materno'.
     *
     * @return string|array The formatted description string consisting of the concatenation of 'nombre',
     * 'apellido_paterno' and 'apellido_materno'.
     * @version 28.2.0
     */
    private function descripcion(array $registro): string|array
    {
        $keys = array('nombre','apellido_paterno');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar com_prospecto',data:  $valida);
        }
        if(!isset($registro['apellido_materno'])){
            $registro['apellido_materno'] = '';
        }

        $descripcion = trim($registro['nombre']).' ';
        $descripcion .= trim($registro['apellido_paterno']).' ';
        $descripcion .= trim($registro['apellido_materno']);
        return trim($descripcion);
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $filtro['com_prospecto.id'] = $id;
        $del = (new com_rel_agente(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar com_prospecto',data:  $del);
        }
        $del = (new com_rel_prospecto_cte(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar relacion',data:  $del);
        }

        $r_del_bd = parent::elimina_bd(id: $id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar',data:  $r_del_bd);
        }
        return $r_del_bd;
    }

    final public function etapas(int $com_prospecto_id, array $order = array('com_prospecto_etapa.id'=>'DESC'))
    {
        $filtro['com_prospecto.id'] = $com_prospecto_id;
        $r_com_prospecto_etapa = (new com_prospecto_etapa(link: $this->link))->filtro_and(filtro: $filtro,order: $order);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener etapas', data: $r_com_prospecto_etapa);
        }
        return $r_com_prospecto_etapa->registros;

    }

    private function inserta_com_rel_agente(int $com_agente_id, int $com_prospecto_id)
    {
        $com_rel_agente_ins = $this->com_rel_agente_ins(com_agente_id: $com_agente_id,
            com_prospecto_id:  $com_prospecto_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar com_rel_agente',data:  $com_rel_agente_ins);
        }

        $alta_com_rel_agente = (new com_rel_agente(link: $this->link))->alta_registro(registro: $com_rel_agente_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar alta_com_rel_agente',data:  $alta_com_rel_agente);
        }
        return $alta_com_rel_agente;

    }

    final public function regenera_agente_inicial(int $com_prospecto_id)
    {
        $com_prospecto = $this->registro(registro_id: $com_prospecto_id,columnas_en_bruto: true, retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener com_prospecto',data:  $com_prospecto);
        }
        $com_agente_id = $com_prospecto->com_agente_id;

        $filtro['com_agente.id'] = $com_agente_id;
        $filtro['com_prospecto.id'] = $com_prospecto_id;
        $existe = (new com_rel_agente(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe relacion',data:  $existe);
        }
        $alta_com_rel_agente = false;
        if(!$existe){
            $alta_com_rel_agente = $this->inserta_com_rel_agente(com_agente_id: $com_agente_id,
                com_prospecto_id:  $com_prospecto_id);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar relacion',data:  $alta_com_rel_agente);
            }
        }
        return $alta_com_rel_agente;

    }

    final public function tiene_cliente(int $com_prospecto_id)
    {
        $filtro['com_prospecto.id'] = $com_prospecto_id;
        $existe = (new com_rel_prospecto_cte(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error validar si existe cliente', data: $existe);
        }
        return $existe;
    }


}