<?php
namespace gamboamartin\comercial\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class com_rel_agente extends _modelo_parent{
    public function __construct(PDO $link, array $childrens = array()){
        $tabla = 'com_rel_agente';
        $columnas = array($tabla=>false, 'com_agente'=>$tabla, 'com_prospecto'=>$tabla, 'com_tipo_agente' => 'com_agente',
            'adm_usuario' => 'com_agente');
        $campos_obligatorios = array('com_agente_id','com_prospecto_id');

        $columnas_extra = array();

        $atributos_criticos =  array('com_prospecto_id','com_agente_id');

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, childrens: $childrens,
            atributos_criticos: $atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Relacion Agente Prospecto';


    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        if(!isset($this->registro['descripcion'])){
            $descripcion = trim($this->registro['com_agente_id']);
            $descripcion .= '-'.trim($this->registro['com_prospecto_id']);
            $this->registro['descripcion'] = $descripcion;
        }

        $filtro['com_agente.id'] = $this->registro['com_agente_id'];
        $filtro['com_prospecto.id'] = $this->registro['com_prospecto_id'];

        $existe = $this->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe rel_com_agente', data: $existe );
        }

        if(!$existe){
            $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar com_rel_agente', data: $r_alta_bd );
            }
        }
        else{

            $r_com_rel_agente = $this->filtro_and(columnas_en_bruto: true, filtro: $filtro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener com_rel_agente', data: $r_com_rel_agente );
            }
            $rel_com_agente_id = $r_com_rel_agente->registros[0]['rel_com_agente_id'];

            $registro = $this->registro(registro_id: $rel_com_agente_id);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener registro', data: $registro);
            }
            $registro_puro = $this->registro(registro_id: $rel_com_agente_id,columnas_en_bruto: true,retorno_obj: true);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener registro', data: $registro);
            }

            $transacciones = new stdClass();
            $transacciones->sql = 'SELECT';

            $r_alta_bd = $this->data_result_transaccion(mensaje: 'Registro previamente insertado', registro: $registro,
                registro_ejecutado: $this->registro, registro_id: $rel_com_agente_id, registro_puro: $registro_puro,
                sql: $transacciones->sql);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al maquetar respuesta registro', data: $registro);
            }

            $this->registro_id = $rel_com_agente_id;
        }
        return $r_alta_bd;
    }

}