<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\comercial\controllers;

use gamboamartin\comercial\models\com_tmp_prod_cs;
use gamboamartin\errores\errores;
use gamboamartin\template\html;
use html\com_producto_html;
use html\com_tmp_prod_cs_html;
use PDO;
use stdClass;
use Throwable;

class controlador_com_tmp_prod_cs extends _base_sin_cod {

    public array|stdClass $keys_selects = array();

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass()){

        $modelo = new com_tmp_prod_cs(link: $link);
        $html_ = new com_tmp_prod_cs_html(html: $html);

        parent::__construct(html_: $html_,link:  $link,modelo:  $modelo, paths_conf: $paths_conf);



    }

    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta = parent::alta(header: false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_alta,header:  $header,ws:  $ws);
        }

        $com_producto_id = (new com_producto_html(html: $this->html_base))->select_com_producto_id(cols: 12,
            con_registros: true,id_selected: -1,link: $this->link);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar input',data:  $com_producto_id,header:  $header,ws:  $ws);
        }

        $this->inputs->com_producto_id  = $com_producto_id;


        $cat_sat_producto = (new com_tmp_prod_cs_html(html: $this->html_base))->input_cat_sat_producto(cols: 12,row_upd: $this->row_upd,value_vacio: false);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar input',data:  $cat_sat_producto,header:  $header,ws:  $ws);
        }

        $this->inputs->cat_sat_producto  = $cat_sat_producto;


        return $r_alta;

    }


    public function init_datatable(): stdClass
    {
        $datatables = new stdClass();
        $datatables->columns = array();
        $datatables->columns['com_tmp_prod_cs_id']['titulo'] = 'Id';
        $datatables->columns['com_tmp_prod_cs_descripcion']['titulo'] = 'Descripcion';

        $datatables->filtro = array();
        $datatables->filtro[] = 'com_tmp_prod_cs.id';
        $datatables->filtro[] = 'com_tmp_prod_cs.descripcion';

        return $datatables;
    }

    public function modifica(bool $header, bool $ws = false, array $keys_selects = array()): array|stdClass
    {
        $r_modifica = parent::modifica($header, $ws, $keys_selects); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_modifica,header:  $header,ws:  $ws);
        }
        $com_producto_id = (new com_producto_html(html: $this->html_base))->select_com_producto_id(cols: 12,
            con_registros: true,id_selected: $this->row_upd->com_producto_id,link: $this->link);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar input',data:  $com_producto_id,header:  $header,ws:  $ws);
        }

        $this->inputs->com_producto_id  = $com_producto_id;


        $cat_sat_producto = (new com_tmp_prod_cs_html(html: $this->html_base))->input_cat_sat_producto(cols: 12,row_upd: $this->row_upd,value_vacio: false);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar input',data:  $cat_sat_producto,header:  $header,ws:  $ws);
        }

        $this->inputs->cat_sat_producto  = $cat_sat_producto;


        return $r_modifica;
    }

    public function regenera(bool $header, bool $ws = false){

        $regenera = (new com_tmp_prod_cs(link: $this->link))->regenera(com_tmp_prod_cs_id: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al eliminar temporal',data:  $regenera,header:  $header,ws:  $ws);
        }

        if($header){

            $this->retorno_base(registro_id:-1, result: $regenera, siguiente_view: 'lista',
                ws:  $ws,seccion_retorno: $this->tabla);
        }
        if($ws){
            header('Content-Type: application/json');
            try {
                echo json_encode($regenera, JSON_THROW_ON_ERROR);
            }
            catch (Throwable $e){
                $error = (new errores())->error(mensaje: 'Error al maquetar JSON' , data: $e);
                print_r($error);
            }
            exit;
        }

        return $regenera;


    }


}
