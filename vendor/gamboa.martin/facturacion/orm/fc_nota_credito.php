<?php

namespace gamboamartin\facturacion\models;


use gamboamartin\errores\errores;
use PDO;
use stdClass;

class fc_nota_credito extends _transacciones_fc
{

    public function __construct(PDO $link, bool $valida_atributos_criticos = true)
    {
        $tabla = 'fc_nota_credito';


        $fc_nota_credito_uuid = "IFNULL($tabla.folio_fiscal,'SIN UUID')";



        $columnas_extra['fc_nota_credito_descuento'] = "IFNULL($tabla.total_descuento,0)";

        $columnas_extra['fc_nota_credito_uuid'] = $fc_nota_credito_uuid;

        parent::__construct(link: $link, tabla: $tabla, columnas_extra: $columnas_extra,
            valida_atributos_criticos: $valida_atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Notas de crÃ©dito';


        $this->key_fc_id = 'fc_nota_credito_id';


    }

    public function alta_bd(): array|stdClass
    {
        $this->modelo_email = new fc_email_nc(link: $this->link);
        $this->modelo_etapa = new fc_nota_credito_etapa(link: $this->link);

        $this->registro['aplica_saldo'] = 'activo';

        $r_alta_bd = parent::alta_bd(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }




        return $r_alta_bd;
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $this->modelo_etapa = new fc_nota_credito_etapa(link: $this->link);
        $this->modelo_partida = new fc_partida_nc(link: $this->link);
        $this->modelo_documento = new fc_nota_credito_documento(link: $this->link);
        $this->modelo_email = new fc_email_nc(link: $this->link);
        $this->modelo_sello = new fc_cfdi_sellado_nc(link: $this->link);
        $this->modelo_relacionada = new fc_nota_credito_relacionada(link: $this->link);
        $this->modelo_notificacion = new fc_notificacion_nc(link: $this->link);
        $this->modelo_relacion = new fc_relacion_nc(link: $this->link);
        $this->modelo_uuid_ext = new fc_uuid_nc(link: $this->link);


        $r_elimina_bd = parent::elimina_bd(id: $id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar',data:  $r_elimina_bd);
        }
        return $r_elimina_bd;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false,
                                bool $verifica_permite_transaccion = true): array|stdClass
    {
        $this->modelo_etapa = new fc_nota_credito_etapa(link: $this->link);

        $r_modifica_bd = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            verifica_permite_transaccion: $verifica_permite_transaccion); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al modificar', data: $r_modifica_bd);
        }
        return $r_modifica_bd;
    }



}