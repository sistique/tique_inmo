<?php
namespace gamboamartin\facturacion\models;
use base\orm\_modelo_parent;
use gamboamartin\cat_sat\models\cat_sat_tipo_de_comprobante;
use gamboamartin\comercial\models\com_sucursal;
use gamboamartin\errores\errores;
use gamboamartin\organigrama\models\org_sucursal;
use gamboamartin\proceso\models\pr_proceso;
use PDO;
use stdClass;


class fc_uuid extends _modelo_parent {
    private _modelo_parent $modelo_etapa;
    public function __construct(PDO $link){
        $tabla = 'fc_uuid';
        $columnas = array($tabla=>false,'fc_csd'=>$tabla,'org_sucursal'=>'fc_csd','com_sucursal'=>$tabla,
            'cat_sat_tipo_de_comprobante'=>$tabla,'org_empresa'=>'org_sucursal','com_cliente'=>'com_sucursal',
            'dp_calle_pertenece'=>'com_sucursal','dp_colonia_postal'=>'dp_calle_pertenece','dp_cp'=>'dp_colonia_postal');
        $campos_obligatorios = array('codigo','fc_csd_id','com_sucursal_id','cat_sat_tipo_de_comprobante_id');

        $no_duplicados = array('uuid');

        $fc_uuid_etapa = "(SELECT pr_etapa.descripcion FROM pr_etapa 
            LEFT JOIN pr_etapa_proceso ON pr_etapa_proceso.pr_etapa_id = pr_etapa.id 
            LEFT JOIN fc_uuid_etapa ON fc_uuid_etapa.pr_etapa_proceso_id = pr_etapa_proceso.id
            WHERE fc_uuid_etapa.fc_uuid_id = fc_uuid.id ORDER BY fc_uuid_etapa.id DESC LIMIT 1)";

        $columnas_extra['fc_uuid_etapa'] = "IFNULL($fc_uuid_etapa,'SIN ETAPA')";

        $campos_view = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, campos_view: $campos_view, columnas_extra: $columnas_extra,
            no_duplicados: $no_duplicados, tipo_campos: array());

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'UUID Externos';

        $this->modelo_etapa = new fc_uuid_etapa(link: $this->link);



    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        $cat_sat_tipo_de_comprobante = (new cat_sat_tipo_de_comprobante(link: $this->link))->registro(
            registro_id: $this->registro['cat_sat_tipo_de_comprobante_id'],retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener cat_sat_tipo_de_comprobante',data:  $cat_sat_tipo_de_comprobante);
        }
        $fc_csd = (new fc_csd(link: $this->link))->registro(
            registro_id: $this->registro['fc_csd_id'],retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_csd',data:  $fc_csd);
        }
        $com_sucursal = (new com_sucursal(link: $this->link))->registro(
            registro_id: $this->registro['com_sucursal_id'],retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener com_sucursal',data:  $com_sucursal);
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $cat_sat_tipo_de_comprobante->cat_sat_tipo_de_comprobante_descripcion;
            $descripcion .= ' '.$fc_csd->org_sucursal_descripcion;
            $descripcion .= ' '.$com_sucursal->com_sucursal_descripcion;
            $descripcion .= ' '.$this->registro['uuid'];
            $descripcion .= ' '.$this->registro['fecha'];
            $descripcion .= ' '.$this->registro['folio'];
            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    public function cancela_bd(int $cat_sat_motivo_cancelacion_id, int $registro_id): array|stdClass
    {
        $fc_cancelacion_ins['fc_uuid_id'] = $registro_id;
        $fc_cancelacion_ins['cat_sat_motivo_cancelacion_id'] = $cat_sat_motivo_cancelacion_id;

        $r_fc_cancelacion = (new fc_uuid_cancela(link: $this->link))->alta_registro(registro: $fc_cancelacion_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al cancelar factura',data:  $r_fc_cancelacion);
        }

        $r_alta_factura_etapa = (new pr_proceso(link: $this->link))->inserta_etapa(adm_accion: __FUNCTION__, fecha: '',
            modelo: $this, modelo_etapa: $this->modelo_etapa, registro_id: $registro_id, valida_existencia_etapa: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar etapa', data: $r_alta_factura_etapa);
        }

        return $r_fc_cancelacion;
    }


}