<?php

namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;


class _p_part extends _modelo_parent{

    protected string $key_p_id = '';

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        $keys = array($this->key_p_id,'cat_sat_tipo_impuesto_id','cat_sat_factor_id','cat_sat_tipo_factor_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data:  $valida);
        }

        $registro = $this->init_row(registro: $this->registro,registro_previo:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al integrar datos',data:  $registro);
        }



        $this->registro = $registro;

        $r_alta_bd = new stdClass();

        $filtro[$this->key_p_id] = $this->registro[$this->key_p_id];
        $filtro['cat_sat_tipo_impuesto_id'] = $this->registro['cat_sat_tipo_impuesto_id'];
        $filtro['cat_sat_tipo_factor_id'] = $this->registro['cat_sat_tipo_factor_id'];
        $filtro['cat_sat_factor_id'] = $this->registro['cat_sat_factor_id'];

        $existe = $this->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al verificar si existe registro',data:  $existe);
        }
        if($existe){
            $r_p_part = $this->filtro_and(filtro: $filtro);
            if($r_p_part->n_registros > 1){
                return $this->error->error(mensaje: 'Error de integridad',data:  $r_p_part);
            }
            $r_alta_bd->registro_id = $r_p_part->registros[0][$this->key_id];
            $r_alta_bd->registro = $r_p_part->registros[0];
        }
        else {
            $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al insertar', data: $r_alta_bd);
            }
        }
        return $r_alta_bd;
    }

    public function alta_registro(array $registro): array|stdClass
    {
        $r_alta =  parent::alta_registro(registro: $registro); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al insertar', data: $r_alta);
        }
        return $r_alta;
    }

    /**
     * Inicializa un registro para transaccionar
     * @param array $registro Registro en proceso
     * @param array $registro_previo registro previo
     * @return array
     */
    private function codigo(array $registro, array $registro_previo): array
    {
        if(!isset($registro['codigo'])){
            $codigo = $registro_previo[$this->key_p_id];
            $codigo .= time();
            $codigo .= mt_rand(1000,9999);
            $registro['codigo'] = $codigo;
        }
        return $registro;
    }

    private function descripcion(array $registro, array $registro_previo): array
    {
        if(!isset($registro_previo['codigo'])){
            $registro_previo = $this->codigo(registro: $registro,registro_previo:  $registro_previo);
        }

        if(!isset($registro['descripcion'])){
            $descripcion = $registro_previo['codigo'];
            $registro['descripcion'] = $descripcion;
        }
        return $registro;
    }

    private function init_row(array $registro, array $registro_previo){
        $registro = $this->codigo(registro: $registro, registro_previo: $registro_previo);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al integrar codigo',data:  $registro);
        }
        $registro = $this->descripcion(registro: $registro, registro_previo: $registro_previo);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al integrar descripcion',data:  $registro);
        }
        return $registro;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false,
                                array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $registro_previo = $this->registro(registro_id: $id, columnas_en_bruto: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro_previo',data:  $registro_previo);
        }

        $registro = $this->init_row(registro: $registro,registro_previo:  $registro_previo);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al integrar datos',data:  $registro);
        }


        $r_modifica_bd  = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar',data:  $r_modifica_bd);
        }
        return $r_modifica_bd;
    }

}