<?php
namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent_sin_codigo;
use gamboamartin\errores\errores;
use stdClass;


class _relacionada extends _modelo_parent_sin_codigo{

    protected _relacion $modelo_relacion;
    protected _transacciones_fc $modelo_entidad;
    protected _etapa $modelo_etapa;

    public bool $valida_restriccion = true;

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {

        $keys = array($this->modelo_relacion->key_id,$this->modelo_entidad->key_id);
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $this->registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }


        $fc_relacion = $this->modelo_relacion->registro(registro_id: $this->registro[$this->modelo_relacion->key_id], retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener fc_factura_relacionada', data: $fc_relacion);
        }

        $key_entidad_id = $this->modelo_entidad->key_id;
        $key_entidad_uuid = $this->modelo_entidad->tabla.'_uuid';
        $key_entidad_folio = $this->modelo_entidad->tabla.'_folio';
        $key_entidad_fecha = $this->modelo_entidad->tabla.'_fecha';

        $permite_transaccion = $this->modelo_entidad->verifica_permite_transaccion(modelo_etapa: $this->modelo_etapa,
            registro_id: $fc_relacion->$key_entidad_id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error verificar transaccion', data: $permite_transaccion);
        }


        $fc_factura = $this->modelo_entidad->registro(registro_id: $this->registro[$key_entidad_id], retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_factura',data:  $fc_factura);
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $fc_relacion->cat_sat_tipo_relacion_id.' '.$fc_factura->$key_entidad_uuid.' '.
                $fc_factura->$key_entidad_folio.' '.$fc_factura->$key_entidad_fecha;

            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $fc_factura_relacionada = $this->registro(registro_id: $id, retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener fc_factura_relacionada', data: $fc_factura_relacionada);
        }

        $key_relacion_id = $this->modelo_relacion->key_id;
        $key_entidad_id = $this->modelo_entidad->key_id;

        //print_r($key_relacion_id);exit;

        $fc_relacion = $this->modelo_relacion->registro(registro_id: $fc_factura_relacionada->$key_relacion_id, retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener registro', data: $fc_relacion);
        }

        if($this->valida_restriccion) {
            $permite_transaccion = $this->modelo_entidad->verifica_permite_transaccion(modelo_etapa: $this->modelo_etapa,
                registro_id: $fc_relacion->$key_entidad_id);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error verificar transaccion', data: $permite_transaccion);
            }
        }
        $r_elimina_bd = parent::elimina_bd($id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar', data: $r_elimina_bd);
        }
        return $r_elimina_bd;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('descripcion')): array|stdClass
    {

        $fc_factura_relacion = $this->registro(registro_id: $id, retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener factura_relacion', data: $fc_factura_relacion);
        }

        $key_relacion_id = $this->modelo_relacion->key_id;
        $key_entidad_id = $this->modelo_entidad->key_id;
        $fc_relacion = $this->registro(registro_id: $fc_factura_relacion->$key_relacion_id, retorno_obj: true);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener registro', data: $fc_relacion);
        }
        $permite_transaccion = $this->modelo_entidad->verifica_permite_transaccion(modelo_etapa: $this->modelo_etapa, registro_id: $fc_relacion->$key_entidad_id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error verificar transaccion', data: $permite_transaccion);
        }

        $r_modifica_bd = parent::modifica_bd($registro, $id, $reactiva, $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar', data: $r_modifica_bd);
        }
        return $r_modifica_bd;

    }


}
