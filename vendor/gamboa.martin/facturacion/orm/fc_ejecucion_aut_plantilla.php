<?php

namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent_sin_codigo;
use gamboamartin\errores\errores;
use PDO;
use stdClass;



class fc_ejecucion_aut_plantilla extends _modelo_parent_sin_codigo
{
    public function __construct(PDO $link)
    {
        $tabla = 'fc_ejecucion_aut_plantilla';
        $columnas = array($tabla => false, 'com_tipo_cliente'=>$tabla);

        $campos_obligatorios = array('com_tipo_cliente_id');

        $columnas_extra = array();

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas,  columnas_extra: $columnas_extra);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Ejecuciones de facturacion automatica';
    }


    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {

        $data = $this->automatiza_facturas(com_tipo_cliente_id: $this->registro['com_tipo_cliente_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar facturas',data:  $data);
        }
        $r_alta = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar registro',data:  $r_alta);
        }

        $fc_ejecucion_aut_plantilla_id = $r_alta->registro_id;

        $facturas = $data->facturas;

        foreach ($facturas as $fc_factura){

            $fc_factura_aut_plantilla_ins = array();
            $fc_factura_aut_plantilla_ins['fc_factura_id'] = $fc_factura->registro_id;
            $fc_factura_aut_plantilla_ins['fc_ejecucion_aut_plantilla_id'] = $fc_ejecucion_aut_plantilla_id;

            $r_alta_fc_aut = (new fc_factura_aut_plantilla(link: $this->link))->alta_registro(
                registro: $fc_factura_aut_plantilla_ins);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar factura automatica',data:  $r_alta_fc_aut);
            }
        }

        return $r_alta;

    }

    private function automatiza_facturas(int $com_tipo_cliente_id){
        $data = $this->data_auto(com_tipo_cliente_id: $com_tipo_cliente_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener datos',data:  $data);
        }

        $facturas = $this->inserta_facturas(data: $data);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar facturas',data:  $facturas);
        }

        $data->facturas = $facturas;
        return $data;
    }


    /**
     * Obtiene las faturas de un tipo de cliente y que sean plantillas
     * @param int $com_tipo_cliente_id Tipo de cliente
     * @return array|stdClass
     * @version 13.0.0
     */
    private function data_auto(int $com_tipo_cliente_id): array|stdClass
    {
        if($com_tipo_cliente_id <= 0){
            return $this->error->error(mensaje: 'Error com_tipo_cliente_id debe ser mayor a 0',
                data:  $com_tipo_cliente_id);
        }

        $filtro['com_tipo_cliente.id'] = $com_tipo_cliente_id;
        $filtro['fc_factura.es_plantilla'] = 'activo';

        $r_plantillas = (new fc_factura(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener plantillas',data:  $r_plantillas);
        }

        $data = new stdClass();
        $data->plantillas = $r_plantillas->registros;

        return $data;
    }


    private function inserta_facturas(stdClass $data){

        $modelo_entidad = new fc_factura(link: $this->link);
        $modelo_partida = new fc_partida(link: $this->link);
        $modelo_retencion = new fc_retenido(link: $this->link);
        $modelo_traslado = new fc_traslado(link: $this->link);

        $facturas_nuevas = array();
        foreach ($data->plantillas as $plantilla) {

            $plantilla = new _plantilla(modelo_entidad: $modelo_entidad, modelo_partida: $modelo_partida,
                modelo_retenido: $modelo_retencion, modelo_traslado: $modelo_traslado,
                row_entidad_id: $plantilla['fc_factura_id']);

            $row_entidad_new = $plantilla->aplica_plantilla();
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al integrar rows_imp_ins', data: $row_entidad_new);
            }
            $facturas_nuevas[] = $row_entidad_new;
        }
        return $facturas_nuevas;
    }


}