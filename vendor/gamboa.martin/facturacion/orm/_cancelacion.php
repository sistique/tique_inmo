<?php
namespace gamboamartin\facturacion\models;


use base\orm\modelo;
use gamboamartin\cat_sat\models\cat_sat_motivo_cancelacion;
use gamboamartin\errores\errores;
use gamboamartin\xml_cfdi_4\timbra;
use stdClass;


class _cancelacion extends modelo {

    protected _transacciones_fc $modelo_entidad;
    protected _sellado $modelo_sello;

    public function alta_bd(): array|stdClass
    {
        $cat_sat_motivo_cancelacion = (new cat_sat_motivo_cancelacion(link: $this->link))->registro(
            registro_id: $this->registro['cat_sat_motivo_cancelacion_id'], retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener motivo de cancelacion',
                data: $cat_sat_motivo_cancelacion);
        }

        $fc_factura = $this->modelo_entidad->registro(
            registro_id: $this->registro[$this->modelo_entidad->key_id], retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_factura', data: $fc_factura);
        }

        $key_id = $this->modelo_entidad->key_id;

        $filtro[$this->modelo_entidad->key_filtro_id] = $fc_factura->$key_id;

        $fc_cfdi_sellado = $this->modelo_sello->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_cfdi_sellado', data: $fc_cfdi_sellado);
        }

        $key_uuid_sello = $this->modelo_sello->tabla.'_uuid';
        $uuid = $fc_cfdi_sellado->registros[0][$key_uuid_sello];

        $key_folio = $this->modelo_entidad->tabla.'_folio';

        $codigo = $fc_factura->$key_folio.''.$cat_sat_motivo_cancelacion->cat_sat_motivo_cancelacion_codigo;
        $codigo .= date('YmdHis');

        if(!isset($this->registro['codigo'])){

            $this->registro['codigo'] = $codigo;
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $fc_factura->$key_folio.''.$cat_sat_motivo_cancelacion->cat_sat_motivo_cancelacion_descripcion;
            $descripcion .= date('YmdHis');
            $this->registro['descripcion'] = $descripcion;
        }
        if(!isset($this->registro['codigo_bis'])){
            $codigo_bis = $codigo;
            $this->registro['codigo_bis'] = $codigo_bis;
        }

        $motivo_cancelacion = $cat_sat_motivo_cancelacion->cat_sat_motivo_cancelacion_codigo;
        $rfc_emisor = $fc_factura->org_empresa_rfc;
        $rfc_receptor = $fc_factura->com_cliente_rfc;


        $data_csd = (new fc_csd(link: $this->link))->data($fc_factura->fc_csd_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener rutas', data: $data_csd);
        }


        $key_total = $this->modelo_entidad->tabla.'_total';

        $cancela = (new timbra())->cancela(motivo_cancelacion: $motivo_cancelacion,rfc_emisor:  $rfc_emisor,
            rfc_receptor:  $rfc_receptor,uuid:  $uuid,pass_csd: $data_csd->fc_csd_password,ruta_cer: $data_csd->ruta_cer,
            ruta_key: $data_csd->ruta_key,total: $fc_factura->$key_total,uuid_sustitucion: '');

        if(errores::$error){
            return $this->error->error(mensaje: 'Error al cancelar',data: $cancela);
        }


        $r_alta_bd = parent::alta_bd(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta',data: $r_alta_bd);
        }
        return $r_alta_bd;
    }


}
