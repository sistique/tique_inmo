<?php
namespace gamboamartin\facturacion\models;


use base\orm\_modelo_parent;
use gamboamartin\cat_sat\models\cat_sat_factor;

use gamboamartin\comercial\models\com_tipo_cambio;
use gamboamartin\errores\errores;
use stdClass;

class _dr_part extends _modelo_parent{

    protected string $entidad_dr = '';
    protected string $tipo_impuesto = '';

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {

        $cat_sat_factor = (new cat_sat_factor(link: $this->link))->registro(
            registro_id: $this->registro['cat_sat_factor_id'], retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener cat_sat_factor',data:  $cat_sat_factor);
        }

        $registro = $this->init_registro_alta(entidad_dr: $this->entidad_dr, registro: $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener codigo',data:  $registro);
        }

        $this->registro = $registro;


        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }

        $com_tipo_cambio_pago = (new com_tipo_cambio(link: $this->link))->registro(
            registro_id: $r_alta_bd->registro['fc_pago_pago_com_tipo_cambio_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener com_tipo_cambio_pago',data:  $com_tipo_cambio_pago);
        }


        $cat_sat_tipo_impuesto_codigo = $r_alta_bd->registro['cat_sat_tipo_impuesto_codigo'];

        $upd = $this->upd_fc_pago_total(cat_sat_factor: $cat_sat_factor,
            cat_sat_tipo_impuesto_codigo: $cat_sat_tipo_impuesto_codigo,
            com_tipo_cambio_factura_monto: $r_alta_bd->registro['com_tipo_cambio_factura_monto'],
            com_tipo_cambio_pago_monto: $com_tipo_cambio_pago['com_tipo_cambio_monto'],
            fc_pago_id: $r_alta_bd->registro['fc_pago_id'], tipo_impuesto: $this->tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar pago_total',data:  $upd);
        }

        $row_p_part = $this->init_data_p(row_dr_part: $r_alta_bd->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar row_p_part',data:  $row_p_part);
        }

        return $r_alta_bd;
    }


    /**
     * Obtiene los campos de part
     * @return array
     */
    private function campos_dr_impuesto_part(): array
    {
        $campos['base_dr'] = $this->tabla.'.base_dr';
        $campos['importe_dr'] = $this->tabla.'.importe_dr';

        return $campos;
    }

    private function campos_suma(): array
    {
        $campos['base_p'] = $this->tabla.'.base_dr';
        $campos['importe_p'] = $this->tabla.'.importe_dr';
        return $campos;
    }



    /**
     * Integra el codigo si no existe de manera automatica
     * @param string $entidad_dr Entidad de tipo traslado_dr o retencion_dr
     * @param array $registro Registro en proceso de alta
     * @return array
     * @version 10.34.0
     */
    private function codigo(string $entidad_dr, array $registro): array
    {
        $entidad_dr = trim($entidad_dr);
        if($entidad_dr === ''){
            return $this->error->error(mensaje: 'Error entidad_dr esta vacia',data:  $entidad_dr);
        }

        if(!isset($registro['codigo'])){
            $key_id = $entidad_dr.'_id';
            $keys = array($key_id);
            $valida = $this->validacion->valida_ids(keys: $keys,registro:  $registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar registro',data:  $valida);
            }

            $codigo = $registro[$entidad_dr.'_id'];
            $codigo .= time();
            $codigo .= mt_rand(1000,9999);
            $registro['codigo'] = $codigo;
        }
        return $registro;
    }

    private function data_importes_total(array $fc_impuesto_dr_part): stdClass
    {
        $base_dr = round($fc_impuesto_dr_part['base_dr'],2);
        $importe_dr = round($fc_impuesto_dr_part['importe_dr'],2);

        $data = new stdClass();
        $data->base_dr = $base_dr;
        $data->importe_dr = $importe_dr;
        $data->fc_impuesto_dr_part = $fc_impuesto_dr_part;
        return $data;
    }

    private function data_upd(array $dr_part, array $fc_row_p): array
    {

        //print_r($fc_row_p);exit;
        //$data_upd['base_p'] = round($dr_part['base_p'] / $fc_row_p['com_tipo_cambio_monto'],2);
        //$data_upd['importe_p'] = round($dr_part['importe_p'] / $fc_row_p['com_tipo_cambio_monto'],2);
        $data_upd['base_p'] = round($dr_part['base_p'] ,2);
        $data_upd['importe_p'] = round($dr_part['importe_p'] ,2);
        return $data_upd;
    }


    /**
     * @param array $registro
     * @return array
     */
    private function descripcion(array $registro): array
    {
        if(!isset($registro['descripcion'])){
            $descripcion = $registro['codigo'];
            $registro['descripcion'] = $descripcion;
        }
        return $registro;

    }



    private function fc_pago_total(int $fc_pago_id){
        $filtro['fc_pago.id'] = $fc_pago_id;
        $r_pago_total = (new fc_pago_total(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener pago_total',data:  $r_pago_total);
        }
        return $r_pago_total->registros[0];
    }

    private function fc_pago_total_upd(stdClass $cat_sat_factor, string $cat_sat_tipo_impuesto_codigo,
                                       float $com_tipo_cambio_factura_monto, float $com_tipo_cambio_pago_monto,
                                       int $fc_pago_id, string $tipo_impuesto): array
    {

        $cat_sat_tipo_impuesto_codigo = trim($cat_sat_tipo_impuesto_codigo);

        if($cat_sat_tipo_impuesto_codigo === ''){
            return $this->error->error(mensaje: 'Error cat_sat_tipo_impuesto_codigo esta vacio',
                data:  $cat_sat_tipo_impuesto_codigo);
        }

        $valida = $this->verifica_tipo_impuesto(tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar tipo de impuesto', data:  $valida);
        }

        $impuestos = $this->importes_impuestos_dr_part(cat_sat_factor_id: $cat_sat_factor->cat_sat_factor_id,
            fc_pago_id:  $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener sumatorias de fc_retencion_dr_part',
                data:  $impuestos);
        }
        $key_factor = $this->key_factor(cat_sat_factor: $cat_sat_factor);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener key_factor', data:  $key_factor);
        }


        $fc_pago_total_upd = $this->fc_pago_total_upd_factor(
            cat_sat_tipo_impuesto_codigo: $cat_sat_tipo_impuesto_codigo, impuestos: $impuestos,
            key_factor: $key_factor, com_tipo_cambio_factura_monto: $com_tipo_cambio_factura_monto,
            com_tipo_cambio_pago_monto: $com_tipo_cambio_pago_monto, tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar fc_pago_total_upd', data:  $fc_pago_total_upd);
        }




        return $fc_pago_total_upd;
    }

    private function fc_pago_total_upd_factor(string $cat_sat_tipo_impuesto_codigo, stdClass $impuestos,
                                              string $key_factor, float $com_tipo_cambio_factura_monto,
                                              float $com_tipo_cambio_pago_monto, string $tipo_impuesto): array
    {

        $cat_sat_tipo_impuesto_codigo = trim($cat_sat_tipo_impuesto_codigo);

        if($cat_sat_tipo_impuesto_codigo === ''){
            return $this->error->error(mensaje: 'Error cat_sat_tipo_impuesto_codigo esta vacio',
                data:  $cat_sat_tipo_impuesto_codigo);
        }

        $key_factor = trim($key_factor);

        if($key_factor === ''){
            return $this->error->error(mensaje: 'Error key_factor esta vacio',
                data:  $key_factor);
        }

        $valida = $this->verifica_tipo_impuesto(tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar tipo de impuesto', data:  $valida);
        }

        $fc_pago_total_upd = array();

        $fc_pago_total_upd = $this->integra_importe_dr_total(
            cat_sat_tipo_impuesto_codigo: $cat_sat_tipo_impuesto_codigo, com_tipo_cambio_factura_monto: $com_tipo_cambio_factura_monto,
            com_tipo_cambio_pago_monto: $com_tipo_cambio_pago_monto, fc_pago_total_upd: $fc_pago_total_upd,
            impuestos: $impuestos, key_factor: $key_factor, tipo_impuesto: $tipo_impuesto);

        if(errores::$error){
            return $this->error->error(mensaje: 'Error integrar importe_dr_mxn', data:  $fc_pago_total_upd);
        }


        $fc_pago_total_upd = $this->integra_impuesto_total_traslado(com_tipo_cambio_factura_monto: $com_tipo_cambio_factura_monto,
            com_tipo_cambio_pago_monto: $com_tipo_cambio_pago_monto, fc_pago_total_upd: $fc_pago_total_upd,
            impuestos: $impuestos, key_factor: $key_factor, tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error integrar fc_pago_total_upd', data:  $fc_pago_total_upd);
        }





        return $fc_pago_total_upd;
    }

    private function filtro_dr_part(array $row_p_part): array
    {
        $filtro['cat_sat_tipo_impuesto.id'] = $row_p_part['cat_sat_tipo_impuesto_id'];
        $filtro['cat_sat_tipo_factor.id'] = $row_p_part['cat_sat_tipo_factor_id'];
        $filtro['cat_sat_factor.id'] = $row_p_part['cat_sat_factor_id'];
        $filtro['fc_pago_pago.id'] = $row_p_part['fc_pago_pago_id'];
        return $filtro;
    }

    /**
     * Maqueta el filtro para obtener las partidas de traslados de un documento
     * @param int $cat_sat_factor_id Factor a verificar
     * @param int $fc_pago_id Pago a verificar
     * @return array
     * @version 10.48.3
     */
    private function filtro_impuestos_dr_part(int $cat_sat_factor_id, int $fc_pago_id): array
    {
        if($cat_sat_factor_id <= 0){
            return $this->error->error(mensaje: 'Error cat_sat_factor_id debe sr mayor a 0', data:  $cat_sat_factor_id);
        }
        if($fc_pago_id <= 0){
            return $this->error->error(mensaje: 'Error fc_pago_id debe sr mayor a 0', data:  $fc_pago_id);
        }
        $filtro['cat_sat_factor.id'] = $cat_sat_factor_id;
        $filtro['fc_pago.id'] = $fc_pago_id;
        return $filtro;
    }

    private function importe_dr_mxn(float $com_tipo_cambio_factura_monto, float $com_tipo_cambio_pago_monto, stdClass $impuestos): float
    {

        $importe_dr = round($impuestos->importe_dr,2);

        if((float)$com_tipo_cambio_factura_monto !== 1.0){
            if($com_tipo_cambio_pago_monto === 1.0){
                $importe_dr = round(round($impuestos->importe_dr,2) * $com_tipo_cambio_factura_monto,2);
            }
        }
        if((float)$com_tipo_cambio_factura_monto !== 1.0){
            if($com_tipo_cambio_pago_monto !== 1.0){
                $importe_dr = round(round($impuestos->importe_dr,2) * $com_tipo_cambio_pago_monto,2);
            }
        }


        return $importe_dr;
    }


    private function integra_impuesto_total_traslado(float $com_tipo_cambio_factura_monto,
                                                     float $com_tipo_cambio_pago_monto, array $fc_pago_total_upd,
                                                     stdClass $impuestos, string $key_factor, string $tipo_impuesto){
        if($tipo_impuesto === 'traslados'){
            $fc_pago_total_upd = $this->integra_total_impuesto(
                com_tipo_cambio_factura_monto: $com_tipo_cambio_factura_monto,
                com_tipo_cambio_pago_monto: $com_tipo_cambio_pago_monto, fc_pago_total_upd: $fc_pago_total_upd,
                impuestos: $impuestos, key_factor: $key_factor, tipo_impuesto: $tipo_impuesto);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error integrar fc_pago_total_upd', data:  $fc_pago_total_upd);
            }

        }
        return $fc_pago_total_upd;
    }

    private function importes_impuestos_dr_part(int $cat_sat_factor_id, int $fc_pago_id){

        $fc_impuesto_dr_part = $this->sum_impuestos_dr_parts(cat_sat_factor_id: $cat_sat_factor_id,fc_pago_id:  $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener sumatorias de fc_impuesto_dr_part', data:  $fc_impuesto_dr_part);
        }

        $data = $this->data_importes_total(fc_impuesto_dr_part: $fc_impuesto_dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar importes', data:  $data);
        }

        return $data;

    }

    private function init_data_p(array $row_dr_part){
        $fc_impuesto_p = (new fc_impuesto_p(link: $this->link))->fc_impuesto_p(fc_complemento_pago_id: $row_dr_part['fc_complemento_pago_id'],
            fc_pago_pago_id: $row_dr_part['fc_pago_pago_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_impuesto_p',data:  $fc_impuesto_p);
        }

        $data = (new fc_impuesto_p(link: $this->link))->datas_para_p(fc_impuesto_p: $fc_impuesto_p, tabla: $this->tabla);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener data',data:  $data);
        }
        $fc_row_p = (new fc_impuesto_p(link: $this->link))->fc_row_p(fc_impuesto_p: $fc_impuesto_p,modelo_p:  $data->modelo_p);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_row_p',data:  $fc_row_p);
        }
        $row_p_part = (new fc_impuesto_p(link: $this->link))->inserta_row_p_part(fc_row_p: $fc_row_p,modelo_p:  $data->modelo_p,
            modelo_p_part:  $data->modelo_p_part,row_dr_part:  $row_dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar row_p_part',data:  $row_p_part);
        }

        $dr_part = $this->suma_dr_part(row_p_part: $row_p_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener suma de campos',data:  $dr_part);
        }

        $data_upd = $this->data_upd(dr_part: $dr_part,fc_row_p:  $fc_row_p);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener datos',data:  $data_upd);
        }



        /**
         * @var _p_part $modelo_p_part
         */
        $modelo_p_part = $data->modelo_p_part;
        /**
         * @var _p_part $data.modelo_p_part
         */
        $upd = $modelo_p_part->modifica_bd(registro: $data_upd, id: $row_p_part[$modelo_p_part->key_id]);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar row_p_part',data:  $upd);
        }

        return $row_p_part;
    }

    private function init_registro_alta(string $entidad_dr, array $registro){
        $registro = $this->codigo(entidad_dr: $entidad_dr, registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener codigo',data:  $registro);
        }
        $registro = $this->descripcion(registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener codigo',data:  $registro);
        }
        return $registro;
    }

    private function integra_importe_dr_total(string $cat_sat_tipo_impuesto_codigo,
                                              float $com_tipo_cambio_factura_monto, float $com_tipo_cambio_pago_monto,
                                              array $fc_pago_total_upd, stdClass $impuestos, string $key_factor,
                                              string $tipo_impuesto){


        $cat_sat_tipo_impuesto_codigo = trim($cat_sat_tipo_impuesto_codigo);

        if($cat_sat_tipo_impuesto_codigo === ''){
            return $this->error->error(mensaje: 'Error cat_sat_tipo_impuesto_codigo esta vacio',
                data:  $cat_sat_tipo_impuesto_codigo);
        }

        $key_factor = trim($key_factor);

        if($key_factor === ''){
            return $this->error->error(mensaje: 'Error key_factor esta vacio',
                data:  $key_factor);
        }

        $valida = $this->verifica_tipo_impuesto(tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar tipo de impuesto', data:  $valida);
        }

        $key_importe_dr = $this->key_importe_dr(cat_sat_tipo_impuesto_codigo: $cat_sat_tipo_impuesto_codigo,
            key_factor:  $key_factor,tipo_impuesto:  $tipo_impuesto);

        if(errores::$error){
            return $this->error->error(mensaje: 'Error obtener key_importe_dr', data:  $key_importe_dr);
        }

        $importe_dr_mxn = $this->importe_dr_mxn(com_tipo_cambio_factura_monto: $com_tipo_cambio_factura_monto,
            com_tipo_cambio_pago_monto: $com_tipo_cambio_pago_monto, impuestos: $impuestos);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error obtener importe_dr_mxn', data:  $importe_dr_mxn);
        }


        $fc_pago_total_upd[$key_importe_dr] = round($importe_dr_mxn,2);
        return $fc_pago_total_upd;
    }

    private function integra_total_impuesto(float $com_tipo_cambio_factura_monto, float $com_tipo_cambio_pago_monto, array $fc_pago_total_upd,
                                            stdClass $impuestos, string $key_factor, string $tipo_impuesto): array
    {
        $key_base_dr = "total_".$tipo_impuesto."_base_iva_$key_factor";
        $base_dr_mxn = round($impuestos->base_dr,2);

        if((float)$com_tipo_cambio_factura_monto !== 1.0){

            if($com_tipo_cambio_pago_monto === 1.0) {
                $base_dr_mxn = round(round($impuestos->base_dr, 2) * $com_tipo_cambio_factura_monto, 2);
            }
            if($com_tipo_cambio_pago_monto !== 1.0){
                $base_dr_mxn = round(round($impuestos->base_dr,2) * $com_tipo_cambio_pago_monto,2);
            }
        }

        if((float)$com_tipo_cambio_pago_monto !== 1.0){

            if($com_tipo_cambio_factura_monto === 1.0) {
                $base_dr_mxn = round(round($impuestos->base_dr, 2) * $com_tipo_cambio_pago_monto, 2);
            }
            if($com_tipo_cambio_factura_monto !== 1.0) {
                $base_dr_mxn = round(round($impuestos->base_dr, 2) * $com_tipo_cambio_pago_monto, 2);
            }

        }




        $fc_pago_total_upd[$key_base_dr] = round($base_dr_mxn,2);

        return $fc_pago_total_upd;
    }


    /**
     * Obtiene el key de los factores a integrar
     * @param stdClass $cat_sat_factor factor para calculo de impuestos
     * @return string|array
     */
    private function key_factor(stdClass $cat_sat_factor): string|array
    {
        $key_factor = '';
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.00){
            $key_factor = '00';
        }
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.08){
            $key_factor = '08';
        }
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.16){
            $key_factor = '16';
        }
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.1066){
            $key_factor = '1066';
        }
        if((float)$cat_sat_factor->cat_sat_factor_factor === 0.0125){
            $key_factor = '0125';
        }


        if($key_factor === ''){
            return $this->error->error(mensaje: 'Error key_factor invalido ingrese uno valido', data:  $cat_sat_factor);
        }

        return $key_factor;
    }

    private function key_importe_dr(string $cat_sat_tipo_impuesto_codigo, string $key_factor, string $tipo_impuesto){

        $cat_sat_tipo_impuesto_codigo = trim($cat_sat_tipo_impuesto_codigo);

        if($cat_sat_tipo_impuesto_codigo === ''){
            return $this->error->error(mensaje: 'Error cat_sat_tipo_impuesto_codigo esta vacio',
                data:  $cat_sat_tipo_impuesto_codigo);
        }

        $key_factor = trim($key_factor);

        if($key_factor === ''){
            return $this->error->error(mensaje: 'Error key_factor esta vacio',
                data:  $key_factor);
        }

        $valida = $this->verifica_tipo_impuesto(tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar tipo de impuesto', data:  $valida);
        }



        $key_importe_dr = '';

        $keys_retenciones = $this->keys_retenciones();
        if(errores::$error){
            return $this->error->error(mensaje: 'Error obtener keys retenciones', data:  $keys_retenciones);
        }

        if($tipo_impuesto === 'retenciones'){
            $key_importe_dr = $keys_retenciones[$cat_sat_tipo_impuesto_codigo];
        }

        if($tipo_impuesto === 'traslados'){
            $key_importe_dr = "total_".$tipo_impuesto."_impuesto_iva_$key_factor";
        }
        return $key_importe_dr;
    }

    /**
     * Maqueta los keys para un row de upd en pago_total
     * @return array
     */
    private function keys_retenciones(): array
    {
        $keys_retenciones['001'] = 'total_retenciones_isr';
        $keys_retenciones['002'] = 'total_retenciones_iva';
        $keys_retenciones['003'] = 'total_retenciones_ieps';
        return $keys_retenciones;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $registro_previo = $this->registro(registro_id: $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro_previo',data:  $registro_previo);
        }


        if(!isset($registro['descripcion'])){

            $codigo = $registro_previo['fc_impuesto_p_codigo'];
            if(isset($registro['codigo'])){
                $codigo = $registro['codigo'];
            }

            $descripcion = $codigo;
            $registro['descripcion'] = $descripcion;
        }
        $r_modifica_bd  = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar',data:  $r_modifica_bd);
        }
        return $r_modifica_bd;
    }

    private function params_importes_total(int $cat_sat_factor_id, int $fc_pago_id){
        $filtro = $this->filtro_impuestos_dr_part(cat_sat_factor_id: $cat_sat_factor_id,fc_pago_id:  $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar filtro', data:  $filtro);
        }

        $campos = $this->campos_dr_impuesto_part();
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar filtro', data:  $filtro);
        }

        $data = new stdClass();
        $data->filtro = $filtro;
        $data->campos = $campos;
        return $data;
    }

    private function sum_impuestos_dr_parts(int $cat_sat_factor_id, int $fc_pago_id){
        $params = $this->params_importes_total(cat_sat_factor_id: $cat_sat_factor_id, fc_pago_id: $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar params', data:  $params);
        }

        $fc_impuestos_dr_part = $this->suma(campos: $params->campos, filtro: $params->filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener sumatorias de fc_impuestos_dr_part',
                data:  $fc_impuestos_dr_part);
        }
        return $fc_impuestos_dr_part;
    }

    private function dr_parts(array $row_p_part){
        $filtro = $this->filtro_dr_part(row_p_part: $row_p_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar filtro',data:  $filtro);
        }

        $r_dr_part = $this->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener r_dr_part',data:  $r_dr_part);
        }

        return $r_dr_part->registros;
    }

    private function suma_dr_part(array $row_p_part){

        $dr_parts = $this->dr_parts(row_p_part: $row_p_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener dr_parts',data:  $dr_parts);
        }

        $importes = $this->genera_importes_p_part(dr_parts: $dr_parts);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener importes',data:  $importes);
        }

        $dr_part_rs['base_p'] = $importes->base_dr_sum;
        $dr_part_rs['importe_p'] = $importes->importe_dr_sum;


        return $dr_part_rs;
    }

    private function genera_importes_p_part(array $dr_parts){
        $base_dr_sum = 0.0;
        $importe_dr_sum = 0.0;
        foreach ($dr_parts as $dr_part){

            $importes = $this->importes_p_part(dr_part: $dr_part);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener importes',data:  $importes);
            }
            $base_dr_sum += $importes->base_dr;
            $importe_dr_sum += $importes->importe_dr;

        }
        $data = new stdClass();
        $data->base_dr_sum = $base_dr_sum;
        $data->importe_dr_sum = $importe_dr_sum;
        return $data;
    }

    private function importes_p_part(array $dr_part){
        $importes = $this->importes_p_init(dr_part: $dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener importes',data:  $importes);
        }

        $importes = $this->importes_monedas_diferentes(dr_part: $dr_part,importes:  $importes);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener importes',data:  $importes);
        }
        return $importes;
    }

    private function importes_monedas_diferentes(array $dr_part, stdClass $importes){

        $keys = array('com_tipo_cambio_factura_cat_sat_moneda_id','com_tipo_cambio_pago_cat_sat_moneda_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar dr_part',data:  $valida);
        }

        $keys = array('com_tipo_cambio_pago_monto','com_tipo_cambio_factura_monto');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $valida',data:  $valida);
        }

        $keys = array('base_dr','importe_dr');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $importes);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar importes',data:  $valida);
        }


        if((int)$dr_part['com_tipo_cambio_factura_cat_sat_moneda_id'] === 161){
            if((int)$dr_part['com_tipo_cambio_pago_cat_sat_moneda_id'] !== 161){
                $importes = $this->importe_mxn_otra_moneda(dr_part: $dr_part,importes:  $importes);
                if(errores::$error){
                    return $this->error->error(mensaje: 'Error al obtener importes',data:  $importes);
                }
            }

        }
        if((int)$dr_part['com_tipo_cambio_factura_cat_sat_moneda_id'] !== 161){
            if((int)$dr_part['com_tipo_cambio_pago_cat_sat_moneda_id'] === 161){
                $importes = $this->importe_otra_moneda_mxn(dr_part: $dr_part,importes:  $importes);
                if(errores::$error){
                    return $this->error->error(mensaje: 'Error al obtener importes',data:  $importes);
                }
            }
        }
        return $importes;
    }

    private function importe_otra_moneda_mxn(array $dr_part, stdClass $importes): stdClass|array
    {
        $keys = array('com_tipo_cambio_factura_monto');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $valida',data:  $valida);
        }

        $keys = array('base_dr','importe_dr');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $importes);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar importes',data:  $valida);
        }

        $importes->base_dr = round($importes->base_dr * $dr_part['com_tipo_cambio_factura_monto'],2);
        $importes->importe_dr = round($importes->importe_dr * $dr_part['com_tipo_cambio_factura_monto'],2);
        return $importes;
    }

    /**
     *
     * @param array $dr_part
     * @param stdClass $importes
     * @return stdClass|array
     */
    private function importe_mxn_otra_moneda(array $dr_part, stdClass $importes): stdClass|array
    {
        $keys = array('com_tipo_cambio_pago_monto');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $valida',data:  $valida);
        }

        $keys = array('base_dr','importe_dr');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $importes);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar importes',data:  $valida);
        }

        $importes->base_dr = round($importes->base_dr / $dr_part['com_tipo_cambio_pago_monto'],2);
        $importes->importe_dr =  round($importes->importe_dr / $dr_part['com_tipo_cambio_pago_monto'],2);

        return $importes;
    }


    /**
     * @param array $dr_part
     * @return stdClass|array
     */
    private function importes_p_init(array $dr_part): stdClass|array
    {
        $keys = array($this->tabla.'_base_dr', $this->tabla.'_importe_dr');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $dr_part);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar importes',data:  $valida);
        }

        $base_dr = round($dr_part[$this->tabla.'_base_dr'],2);
        $importe_dr =  round($dr_part[$this->tabla.'_importe_dr'],2);

        $data = new stdClass();
        $data->base_dr = $base_dr;
        $data->importe_dr = $importe_dr;
        return $data;
    }

    /**
     * Obtiene un array con los tipos de impuesto validos que son retenciones o traslados
     * @return array
     * @version 10.117.4
     */
    private function tipo_impuestos_validos(): array
    {
        $tipos_impuestos_validos[] = 'retenciones';
        $tipos_impuestos_validos[] = 'traslados';
        return $tipos_impuestos_validos;
    }

    final public function upd_fc_pago_total(stdClass $cat_sat_factor, string $cat_sat_tipo_impuesto_codigo,
                                            float $com_tipo_cambio_factura_monto, float $com_tipo_cambio_pago_monto,
                                            int $fc_pago_id, string $tipo_impuesto){

        $cat_sat_tipo_impuesto_codigo = trim($cat_sat_tipo_impuesto_codigo);

        if($cat_sat_tipo_impuesto_codigo === ''){
            return $this->error->error(mensaje: 'Error cat_sat_tipo_impuesto_codigo esta vacio',
                data:  $cat_sat_tipo_impuesto_codigo);
        }


        $valida = $this->verifica_tipo_impuesto(tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar tipo de impuesto', data:  $valida);
        }

        $fc_pago_total_upd = $this->fc_pago_total_upd(cat_sat_factor: $cat_sat_factor,
            cat_sat_tipo_impuesto_codigo: $cat_sat_tipo_impuesto_codigo,
            com_tipo_cambio_factura_monto: $com_tipo_cambio_factura_monto, com_tipo_cambio_pago_monto: $com_tipo_cambio_pago_monto,
            fc_pago_id: $fc_pago_id, tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_pago_total_upd',data:  $fc_pago_total_upd);
        }


        $fc_pago_total = $this->fc_pago_total(fc_pago_id: $fc_pago_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_pago_total',data:  $fc_pago_total);
        }


        $upd = (new fc_pago_total(link: $this->link))->modifica_bd(registro: $fc_pago_total_upd ,
            id: $fc_pago_total['fc_pago_total_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar pago_total',data:  $upd);
        }
        return $upd;
    }

    /**
     * Valida que un tipo de impuesto sea Valido
     * @param string $tipo_impuesto Tipo de impuesto a validar Retenciones o Traslados
     * @return array|true
     *
     */
    private function valida_tipo_impuesto(string $tipo_impuesto): bool|array
    {
        $tipos_impuestos_validos = $this->tipo_impuestos_validos();
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar tipos de impuestos', data:  $tipos_impuestos_validos);
        }

        if(!in_array($tipo_impuesto, $tipos_impuestos_validos)){
            return $this->error->error(mensaje: 'Error ingrese un tipo impuesto valido',
                data:  $tipos_impuestos_validos);
        }
        return true;
    }

    private function verifica_tipo_impuesto(string $tipo_impuesto){
        $tipo_impuesto = trim($tipo_impuesto);

        if($tipo_impuesto === ''){
            return $this->error->error(mensaje: 'Error tipo_impuesto esta vacio',
                data:  $tipo_impuesto);
        }

        $valida = $this->valida_tipo_impuesto(tipo_impuesto: $tipo_impuesto);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar tipo de impuesto', data:  $valida);
        }
        return true;
    }

}


