<?php
namespace gamboamartin\facturacion\models;
use gamboamartin\cat_sat\models\cat_sat_conf_imps;
use gamboamartin\errores\errores;
use stdClass;

class com_producto extends \gamboamartin\comercial\models\com_producto {

    final public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta producto',data:  $r_alta_bd);
        }

        $r_alta_conf = $this->regenera_data_confs(cat_sat_conf_imps_id: $this->registro['cat_sat_conf_imps_id'],
            com_producto_id:  $r_alta_bd->registro_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $r_alta_conf);
        }


        return $r_alta_bd;
    }

    final public function elimina_bd(int $id): array|stdClass
    {
        $filtro['com_producto.id'] = $id;
        $r_elimina_tr = (new fc_conf_traslado(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar conf traslado',data:  $r_elimina_tr);
        }
        $r_elimina_re = (new fc_conf_retenido(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar conf retencion',data:  $r_elimina_re);
        }
        $r_fc_conf_aut_producto = (new fc_conf_aut_producto(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar fc_conf_aut_producto',data:  $r_fc_conf_aut_producto);
        }

        $r_elimina_bd = parent::elimina_bd(id: $id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar',data:  $r_elimina_bd);
        }
        return $r_elimina_bd;

    }

    private function fc_conf_ins(int $com_producto_id, array $conf): array
    {
        $fc_conf_ins['com_producto_id'] = $com_producto_id;
        $fc_conf_ins['cat_sat_tipo_factor_id'] = $conf['cat_sat_tipo_factor_id'];
        $fc_conf_ins['cat_sat_factor_id'] = $conf['cat_sat_factor_id'];
        $fc_conf_ins['cat_sat_tipo_impuesto_id'] = $conf['cat_sat_tipo_impuesto_id'];
        return $fc_conf_ins;
    }

    private function inserta_conf(int $com_producto_id, array $conf, string $entidad){
        $fc_conf = $this->fc_conf_ins(com_producto_id: $com_producto_id,conf:  $conf);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al maquetar conf',data:  $fc_conf);
        }

        $r_alta_conf = new stdClass();

        if($entidad === 'fc_conf_retenido'){
            $r_alta_conf = (new fc_conf_retenido(link: $this->link))->alta_registro(registro: $fc_conf);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertarÂ¿ configuracion',data:  $r_alta_conf);
            }
        }
        if($entidad === 'fc_conf_traslado'){
            $r_alta_conf = (new fc_conf_traslado(link: $this->link))->alta_registro(registro: $fc_conf);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertarÂ¿ configuracion',data:  $r_alta_conf);
            }
        }
        return $r_alta_conf;


    }

    private function inserta_configuraciones(int $com_producto_id, array $configuraciones, string $entidad){
        $confs = array();
        foreach ($configuraciones as $conf){

            $r_alta_conf = $this->inserta_conf(com_producto_id: $com_producto_id,conf:  $conf, entidad: $entidad);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $r_alta_conf);
            }
            $confs[] = $r_alta_conf;
        }
        return $confs;
    }

    private function inserta_configuraciones_impuestos(int $com_producto_id, array $retenciones, array $traslados){
        $data = new stdClass();
        $r_alta_conf = $this->inserta_configuraciones(com_producto_id: $com_producto_id,
            configuraciones:  $retenciones,entidad:  'fc_conf_retenido');
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $r_alta_conf);
        }
        $data->fc_conf_retencion = $r_alta_conf;

        $r_alta_conf = $this->inserta_configuraciones(com_producto_id: $com_producto_id,
            configuraciones:  $traslados,entidad:  'fc_conf_traslado');
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $r_alta_conf);
        }
        $data->fc_conf_traslado = $r_alta_conf;


        return $data;
    }

    private function inserta_data_confs(int $cat_sat_conf_imps_id, int $com_producto_id){
        $confs = (new cat_sat_conf_imps(link: $this->link))->get_impuestos(cat_sat_conf_imps_id: $cat_sat_conf_imps_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener confs',data:  $confs);
        }

        $retenciones = $confs->retenciones;
        $traslados = $confs->traslados;

        $r_alta_conf = $this->inserta_configuraciones_impuestos(com_producto_id: $com_producto_id,
            retenciones:  $retenciones,traslados:   $traslados);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $r_alta_conf);
        }

        return $r_alta_conf;
    }

    final public function modifica_bd(array $registro, int $id, bool $reactiva = false,
                                      array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        $r_modifica_bd = parent::modifica_bd($registro, $id, $reactiva, $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar configuracion',data:  $r_modifica_bd);
        }

        $com_producto = $this->registro(registro_id: $id, retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener producto',data:  $com_producto);
        }


        $r_alta_conf = $this->regenera_data_confs(cat_sat_conf_imps_id: $com_producto->cat_sat_conf_imps_id,
            com_producto_id:  $id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $r_alta_conf);
        }

        return $r_modifica_bd;

    }

    final public function regenera_data_confs(int $cat_sat_conf_imps_id, int $com_producto_id){
        $filtro['com_producto.id'] = $com_producto_id;
        $del = (new fc_conf_traslado(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar configuracion',data:  $del);
        }
        $del = (new fc_conf_retenido(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar configuracion',data:  $del);
        }

        $inserta_data_confs = $this->inserta_data_confs(
            cat_sat_conf_imps_id: $cat_sat_conf_imps_id,com_producto_id:  $com_producto_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar configuracion',data:  $inserta_data_confs);
        }

        return $inserta_data_confs;


    }


}