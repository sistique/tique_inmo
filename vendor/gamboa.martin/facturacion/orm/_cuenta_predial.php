<?php
namespace gamboamartin\facturacion\models;

use base\orm\_modelo_parent_sin_codigo;
use gamboamartin\cat_sat\models\cat_sat_conf_imps;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class _cuenta_predial extends  _modelo_parent_sin_codigo{

    protected _partida $modelo_partida;

    public function __construct(PDO $link, string $tabla, _partida $modelo_partida, bool $aplica_bitacora = false,
                                bool $aplica_seguridad = false, bool $aplica_transaccion_inactivo = true,
                                array $campos_encriptados = array(), array $campos_obligatorios = array(),
                                array $columnas = array(), array $campos_view = array(),
                                array $columnas_extra = array(), array $extension_estructura = array(),
                                array $no_duplicados = array(), array $renombres = array(),
                                array $sub_querys = array(), array $tipo_campos = array(), bool $validation = false,
                                array $campos_no_upd = array(), array $parents = array(), bool $temp = false,
                                array $childrens = array(), array $defaults = array(), array $parents_data = array(),
                                array $atributos_criticos = array())
    {
        parent::__construct(link: $link,tabla:  $tabla,aplica_bitacora:  $aplica_bitacora,
            aplica_seguridad:  $aplica_seguridad,aplica_transaccion_inactivo:  $aplica_transaccion_inactivo,
            campos_encriptados: $campos_encriptados,campos_obligatorios:  $campos_obligatorios,
            columnas:  $columnas,campos_view:  $campos_view,columnas_extra:  $columnas_extra,
            extension_estructura:  $extension_estructura,
            no_duplicados: $no_duplicados,renombres:  $renombres,sub_querys:  $sub_querys,
            tipo_campos:  $tipo_campos,validation:  $validation,campos_no_upd:  $campos_no_upd,parents:  $parents,temp:  $temp,
            childrens: $childrens,defaults:  $defaults,parents_data:  $parents_data,atributos_criticos:  $atributos_criticos);

        $this->modelo_partida = $modelo_partida;
    }


    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        if(!isset($this->registro['descripcion'])){
            $this->registro['descripcion'] = $this->registro[$this->modelo_partida->tabla.'_id'];
            $this->registro['descripcion'] .= $this->registro['cuenta_predial'];
        }
        $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    final public function cuenta_predial(int $fc_registro_partida_id){
        $filtro[$this->modelo_partida->tabla.'.id'] = $fc_registro_partida_id;
        $r_fc_cuenta_predial = $this->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener fc_cuenta_predial',data:  $r_fc_cuenta_predial);
        }
        if($r_fc_cuenta_predial->n_registros>1){
            return $this->error->error(mensaje: 'Error solo puede haber una cuenta',data:  $r_fc_cuenta_predial);
        }
        $fc_cuenta_predial = array();
        if($r_fc_cuenta_predial->n_registros === 1){
            $fc_cuenta_predial = $r_fc_cuenta_predial->registros[0];
        }
        return $fc_cuenta_predial;
    }


}
