<?php
namespace gamboamartin\proceso\models;
use base\orm\_modelo_parent_sin_codigo;

use gamboamartin\administrador\models\adm_seccion;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class pr_entidad_proceso extends _modelo_parent_sin_codigo {
    public function __construct(PDO $link){
        $tabla = 'pr_entidad_proceso';
        $columnas = array($tabla=>false,'adm_seccion'=>$tabla,'pr_proceso'=>$tabla,'pr_tipo_proceso'=>'pr_proceso');
        $campos_obligatorios = array();

        parent::__construct(link: $link,tabla:  $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas);

        $this->NAMESPACE = __NAMESPACE__;
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        $keys = array('pr_proceso_id','adm_seccion_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data: $valida);
        }


        $registro = $this->init_alta(registro: $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener datos base',data: $registro);
        }

        $this->registro = $registro;

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta registro',data: $r_alta_bd);
        }
        return $r_alta_bd;
    }

    private function asigna_datos_base(stdClass $data,array $registro): array
    {
        if(!isset($registro['codigo'])){
            $codigo = $data->pr_proceso->pr_proceso_codigo.''.$data->adm_seccion->adm_seccion_codigo;
            $registro['codigo'] = $codigo;
        }
        if(!isset($registro['descripcion'])){
            $descripcion = $data->pr_proceso->pr_proceso_descripcion.''.$data->adm_seccion->adm_seccion_descripcion;
            $registro['descripcion'] = $descripcion;
        }
        return $registro;
    }

    /**
     * Obtiene los datos necesarios para un entidad proceso
     * @param array $registro Registro en ejecucion
     * @return array|stdClass
     */
    private function data_entidad_proceso(array $registro): array|stdClass
    {
        $pr_proceso = (new pr_proceso(link: $this->link))->registro(registro_id: $registro['pr_proceso_id'],
            retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener proceso',data: $pr_proceso);
        }
        $adm_seccion = (new adm_seccion(link: $this->link))->registro(registro_id: $registro['adm_seccion_id'],
            retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener adm_seccion',data: $adm_seccion);
        }
        $data = new stdClass();
        $data->pr_proceso = $pr_proceso;
        $data->adm_seccion = $adm_seccion;
        return $data;
    }

    private function init_alta(array $registro){
        $data = $this->data_entidad_proceso(registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener datos de proceso',data: $data);
        }

        $registro = $this->asigna_datos_base(data: $data,registro:  $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener datos base',data: $registro);
        }
        return $registro;
    }
}