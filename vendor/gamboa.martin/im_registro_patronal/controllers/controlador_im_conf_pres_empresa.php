<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\im_registro_patronal\controllers;

use gamboamartin\errores\errores;
use gamboamartin\system\links_menu;
use gamboamartin\system\system;
use html\im_conf_pres_empresa_html;
use gamboamartin\im_registro_patronal\models\im_conf_pres_empresa;
use gamboamartin\template\html;
use PDO;
use stdClass;

class controlador_im_conf_pres_empresa extends system {

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass()){
        $modelo = new im_conf_pres_empresa(link: $link);
        $html_ = new im_conf_pres_empresa_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id:$this->registro_id);

        $columns["im_conf_pres_empresa_id"]["titulo"] = "Id";
        $columns["im_conf_pres_empresa_codigo"]["titulo"] = "Código";
        $columns["im_conf_pres_empresa_descripcion"]["titulo"] = "Registro Patronal";

        $columns["org_empresa_razon_social"]["titulo"] = "Razón Social";
        $columns["im_conf_prestaciones_descripcion"]["titulo"] = "Conf. Prestación";

        $datatables = new stdClass();
        $datatables->columns = $columns;

        parent::__construct(html:$html_, link: $link,modelo:  $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);

        $this->asignar_propiedad(identificador:'org_empresa_id', propiedades: ["label" => "Empresa"]);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al asignar propiedad', data: $this);
            print_r($error);
            die('Error');
        }

        $this->asignar_propiedad(identificador:'im_conf_prestaciones_id', propiedades: ["label" => "Conf. Prestaciones"]);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al asignar propiedad', data: $this);
            print_r($error);
            die('Error');
        }

        $this->asignar_propiedad(identificador: 'descripcion', propiedades: ['place_holder'=> 'Descripción']);
        $this->asignar_propiedad(identificador: 'codigo', propiedades: ['place_holder'=> 'Código']);

        $this->titulo_lista = 'Configuracion de Prestaciones Empresa';
    }

    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta =  parent::alta(header: false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_alta, header: $header,ws:$ws);
        }

        $inputs = $this->genera_inputs(keys_selects:  $this->keys_selects);
        if(errores::$error){
            $error = $this->errores->error(mensaje: 'Error al generar inputs',data:  $inputs);
            print_r($error);
            die('Error');
        }

        return $r_alta;
    }

    private function base(): array|stdClass
    {
        $r_modifica =  parent::modifica(header: false);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al generar template',data:  $r_modifica);
        }

        $this->asignar_propiedad(identificador:'org_empresa_id',
            propiedades: ["id_selected"=>$this->row_upd->org_empresa_id]);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al asignar propiedad', data: $this);
            print_r($error);
            die('Error');
        }

        $this->asignar_propiedad(identificador:'im_conf_prestaciones_id',
            propiedades: ["id_selected"=>$this->row_upd->im_conf_prestaciones_id]);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al asignar propiedad', data: $this);
            print_r($error);
            die('Error');
        }

        $inputs = $this->genera_inputs(keys_selects:  $this->keys_selects);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar inputs',data:  $inputs);
        }


        $data = new stdClass();
        $data->template = $r_modifica;
        $data->inputs = $inputs;

        return $data;
    }

    public function modifica(bool $header, bool $ws = false): array|stdClass
    {
        $base = $this->base();
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar datos',data:  $base,
                header: $header,ws:$ws);
        }

        return $base->template;
    }


}
