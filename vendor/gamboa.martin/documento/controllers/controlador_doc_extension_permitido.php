<?php
namespace gamboamartin\documento\controllers;

use base\controller\init;
use gamboamartin\documento\models\doc_extension;
use gamboamartin\documento\models\doc_extension_permitido;
use gamboamartin\documento\models\doc_tipo_documento;
use gamboamartin\errores\errores;
use gamboamartin\system\_ctl_base;
use gamboamartin\system\links_menu;
use gamboamartin\template_1\html;
use html\doc_extension_permitido_html;
use PDO;
use stdClass;

class controlador_doc_extension_permitido extends _ctl_base{
    public function __construct(PDO $link,  html $html = new html(), stdClass $paths_conf = new stdClass()){
        $modelo = new doc_extension_permitido($link);

        $html_ = new doc_extension_permitido_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id: $this->registro_id);

        $datatables = new stdClass();
        $datatables->columns = array();
        $datatables->columns['doc_extension_permitido_id']['titulo'] = 'Id';
        $datatables->columns['doc_extension_descripcion']['titulo'] = 'Extension';
        $datatables->columns['doc_tipo_documento_descripcion']['titulo'] = 'Tipo Doc';


        parent::__construct(html: $html_, link: $link, modelo: $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);

        $this->titulo_lista = 'Extensiones';


        $this->lista_get_data = true;

        $this->modelo = $modelo;

        $this->parents_verifica['doc_extension'] = (new doc_extension(link: $this->link));
        $this->parents_verifica['doc_tipo_documento'] = (new doc_tipo_documento(link: $this->link));
        $this->verifica_parents_alta = true;

    }


    public function alta(bool $header, bool $ws = false): array|string
    {

        $r_alta = $this->init_alta();
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al inicializar alta',data:  $r_alta, header: $header,ws:  $ws);
        }


        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'doc_tipo_documento_id',
            keys_selects: array(), id_selected: -1, label: 'Tipo Doc');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects, header: $header,ws:  $ws);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'doc_extension_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Extension');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects, header: $header,ws:  $ws);
        }


        $inputs = $this->inputs_base_alta(keys_selects: $keys_selects);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $inputs, header: $header,ws:  $ws);
        }


        return $r_alta;
    }


    protected function campos_view(): array
    {
        $keys = new stdClass();
        $keys->inputs = array('codigo','descripcion');
        $keys->selects = array();


        $init_data = array();
        $init_data['doc_tipo_documento'] = "gamboamartin\\documento";
        $init_data['doc_extension'] = "gamboamartin\\documento";

        $campos_view = $this->campos_view_base(init_data: $init_data,keys:  $keys);


        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar campo view',data:  $campos_view);
        }


        return $campos_view;
    }




    /**
     * Genera los keys para inputs de frontend
     * @param array $keys_selects Keys predefinidos
     * @return array
     */
    protected function key_selects_txt(array $keys_selects): array
    {

        $keys_selects = (new init())->key_select_txt(cols: 12, key: 'codigo', keys_selects: $keys_selects, place_holder: 'Cod');
        if (errores::$error) {
            return $this->errores->error(mensaje: 'Error al maquetar key_selects', data: $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'descripcion', keys_selects:$keys_selects, place_holder: 'Extension');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }


        return $keys_selects;
    }

    public function modifica(
        bool $header, bool $ws = false): array|stdClass
    {
        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'doc_tipo_documento_id',
            keys_selects: array(), id_selected: $this->registro['doc_tipo_documento_id'], label: 'Tipo Doc');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects, header: $header,ws:  $ws);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'doc_extension_id',
            keys_selects:$keys_selects, id_selected: $this->registro['doc_extension_id'], label: 'Extension');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects, header: $header,ws:  $ws);
        }


        $base = $this->upd_base_template(keys_selects: $keys_selects);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        return $r_modifica;
    }
}