<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\cat_sat\controllers;

use base\controller\controler;
use base\controller\salida_data;
use gamboamartin\cat_sat\models\cat_sat_tipo_persona;
use gamboamartin\errores\errores;
use gamboamartin\system\system;
use gamboamartin\template\directivas;
use gamboamartin\template\html;
use html\cat_sat_tipo_persona_html;

use JsonException;
use links\secciones\link_cat_sat_tipo_persona;

use PDO;
use stdClass;
use Throwable;

class controlador_cat_sat_tipo_persona extends _cat_sat_base {

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass()){
        $modelo = new cat_sat_tipo_persona(link: $link);
        $html_ = new cat_sat_tipo_persona_html(html: $html);
        $obj_link = new link_cat_sat_tipo_persona(link: $link, registro_id: $this->registro_id);
        $this->rows_lista[] = 'valida_persona_fisica';

        $datatables = $this->init_datatable();
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al inicializar datatable', data: $datatables);
            print_r($error);
            die('Error');
        }

        parent::__construct(html: $html_, link: $link, modelo: $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);

        $configuraciones = $this->init_configuraciones();
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al inicializar configuraciones', data: $configuraciones);
            print_r($error);
            die('Error');
        }
        $this->acciones->valida_persona_fisica = new stdClass();
        $this->acciones->valida_persona_fisica->style = '';
        $this->acciones->valida_persona_fisica->style_status = true;

    }

    public function get_tipo_persona(bool $header, bool $ws = true): array|stdClass
    {
        $filtro['cat_sat_tipo_persona.descripcion'] = $_GET['tipo_persona'];
        $r_modelo = $this->modelo->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener datos',data:  $r_modelo,header: $header,ws: $ws);
        }

        if($r_modelo->n_registros <= 0){
            return $this->retorno_error(mensaje: 'Error no hay tipo persona',data:  $r_modelo,
                header:  $header,ws:  $ws);
        }

        if($header){
            $retorno = $_SERVER['HTTP_REFERER'];
            header('Location:'.$retorno);
            exit;
        }
        if($ws){
            header('Content-Type: application/json');
            try {
                echo json_encode($r_modelo->registros[0], JSON_THROW_ON_ERROR);
            }
            catch (Throwable $e){
                return $this->errores->error(mensaje: 'Error al maquetar estados',data:  $e);
            }
            exit;
        }

        return $r_modelo;
    }


    private function init_configuraciones(): controler
    {
        $this->titulo_lista = 'Tipos de Persona';

        $this->lista_get_data = true;

        return $this;
    }

    private function init_datatable(): stdClass
    {
        $columns["cat_sat_tipo_persona_id"]["titulo"] = "Id";
        $columns["cat_sat_tipo_persona_codigo"]["titulo"] = "CÃ³digo";
        $columns["cat_sat_tipo_persona_descripcion"]["titulo"] = "Forma Pago";

        $filtro = array("cat_sat_tipo_persona.id","cat_sat_tipo_persona.codigo","cat_sat_tipo_persona.descripcion");

        $datatables = new stdClass();
        $datatables->columns = $columns;
        $datatables->filtro = $filtro;

        return $datatables;
    }

    
    /**
     * @param bool $header
     * @param bool $ws
     * @return array|stdClass
     */
    public function modifica(bool $header, bool $ws = false): array|stdClass
    {


        $r_modifica = parent::modifica(header: $header, ws: $ws); // TODO: Change the autogenerated stub

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_modifica,
                header:  $header,ws:  $ws);
        }


        $button_status = (new directivas(html: $this->html_base))->button_href_status(cols: 6, registro_id:$this->registro_id,
            seccion: $this->seccion,status: $this->row_upd->status);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar boton', data: $button_status,
                header:  $header, ws: $ws);
        }
        $this->inputs->status = $button_status;

        return $r_modifica;

    }

    /**
     * @throws JsonException
     */
    public function valida_persona_fisica(bool $header, bool $ws): array|stdClass
    {
        $this->link->beginTransaction();
        $upd = $this->modelo->status('valida_persona_fisica', $this->registro_id);
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al modificar registro', data: $upd,header:  $header, ws: $ws);
        }
        $this->link->commit();
        $_SESSION['exito'][]['mensaje'] = 'Se ajusto el estatus de manera el registro con el id '.$this->registro_id;

        $this->header_out(result: $upd, header: $header,ws:  $ws);
        return $upd;

    }


}
