<?php
namespace gamboamartin\cat_sat\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class cat_sat_conf_imps_tipo_pers extends _modelo_parent {

    public function __construct(PDO $link, bool $aplica_transacciones_base = false){
        $tabla = 'cat_sat_conf_imps_tipo_pers';
        $columnas = array($tabla=>false,'cat_sat_conf_imps'=>$tabla,'cat_sat_conf_reg_tp'=>$tabla);
        $campos_obligatorios[] = 'cat_sat_conf_imps_id';
        $campos_obligatorios[] = 'cat_sat_conf_reg_tp_id';

        $tipo_campos = array();

        parent::__construct(link: $link, tabla: $tabla, aplica_transacciones_base: $aplica_transacciones_base,
            campos_obligatorios: $campos_obligatorios, columnas: $columnas, tipo_campos: $tipo_campos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Configuraciones de Impuestos';
        $this->id_code = true;

    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $data = $this->datos_base_alta(registro: $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener datos',data: $data);
        }

        $registro = $this->descripcion(data: $data,registro: $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener registro',data: $registro);
        }
        $this->registro = $registro;

        $filtro['cat_sat_conf_imps.id'] = $data->cat_sat_conf_imps['cat_sat_conf_imps_id'];
        $filtro['cat_sat_conf_reg_tp.id'] = $data->cat_sat_conf_reg_tp['cat_sat_conf_reg_tp_id'];

        $existe = $this->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al verificar si existe',data: $existe);
        }
        if($existe){
            $r_alta_bd = $this->alta_existente(filtro: $filtro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al maquetar salida',data: $r_alta_bd);
            }
        }
        else {

            $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al insertar', data: $r_alta_bd);
            }
        }
        return $r_alta_bd;

    }



    /**
     * @param array $registro
     * @return array|stdClass
     */
    private function datos_base_alta(array $registro): array|stdClass
    {
        $keys = array('cat_sat_conf_imps_id','cat_sat_conf_reg_tp_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data: $valida);
        }

        $cat_sat_conf_imps = (new cat_sat_conf_imps(link: $this->link))->registro(
            registro_id: $registro['cat_sat_conf_imps_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener cat_sat_conf_imps',data: $cat_sat_conf_imps);
        }

        $cat_sat_conf_reg_tp = (new cat_sat_conf_reg_tp(link: $this->link))->registro(
            registro_id: $registro['cat_sat_conf_reg_tp_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener cat_sat_conf_reg_tp',data: $cat_sat_conf_reg_tp);
        }
        $data = new stdClass();
        $data->cat_sat_conf_imps = $cat_sat_conf_imps;
        $data->cat_sat_conf_reg_tp = $cat_sat_conf_reg_tp;
        return $data;
    }

    private function descripcion(stdClass $data, array $registro): array
    {
        if(!isset($registro['descripcion'])){
            $registro['descripcion'] = $data->cat_sat_conf_imps['cat_sat_conf_imps_descripcion'];
            $registro['descripcion'] .= ' '.$data->cat_sat_conf_reg_tp['cat_sat_conf_reg_tp_descripcion'];
        }
        return $registro;
    }


}