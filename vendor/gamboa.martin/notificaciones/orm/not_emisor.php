<?php
namespace gamboamartin\notificaciones\models;

use base\orm\_modelo_parent_sin_codigo;

use gamboamartin\errores\errores;
use PDO;
use stdClass;

class not_emisor extends _modelo_parent_sin_codigo {
    public function __construct(PDO $link){
        $tabla = 'not_emisor';
        $columnas = array($tabla=>false);
        $campos_obligatorios = array('email','user_name','password','port','host','smtp_secure');

        $no_duplicados = array();

        $campos_view = array();
        $columnas_extra = array();

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, campos_view: $campos_view, columnas_extra: $columnas_extra,
            no_duplicados: $no_duplicados, tipo_campos: array());

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Emisores';
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->registro['email'];
            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta emisor',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    final public function not_emisor_selected()
    {
        $not_emisores = $this->registros_activos();
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener emisores',data:  $not_emisores);
        }

        $n_emisores = count($not_emisores);

        if($n_emisores === 0){
            return $this->error->error(mensaje: 'Error no existen emisores',data:  $not_emisores);
        }
        $emisor_selected = mt_rand(0,$n_emisores-1);
        return (object)$not_emisores[$emisor_selected];

    }


}