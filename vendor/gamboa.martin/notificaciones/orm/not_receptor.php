<?php
namespace gamboamartin\notificaciones\models;

use base\orm\_modelo_parent_sin_codigo;

use gamboamartin\errores\errores;
use PDO;
use stdClass;

class not_receptor extends _modelo_parent_sin_codigo {
    public function __construct(PDO $link){
        $tabla = 'not_receptor';
        $columnas = array($tabla=>false);
        $campos_obligatorios = array('email');

        $no_duplicados = array('email');

        $campos_view = array();
        $columnas_extra = array();
        $tipo_campos['email'] = 'correo';

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, campos_view: $campos_view, columnas_extra: $columnas_extra,
            no_duplicados: $no_duplicados, tipo_campos: $tipo_campos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Receptores';
    }

    public function alta_bd(array $keys_integra_ds = array('descripcion')): array|stdClass
    {
        $keys = array('email');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data:  $valida);
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->registro['email'];
            $this->registro['descripcion'] = $descripcion;
        }

        $filtro['not_receptor.email'] = $this->registro['email'];
        $existe = $this->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe',data:  $existe);
        }

        if(!$existe) {
            $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al dar de alta receptor', data: $r_alta_bd);
            }
        }
        else{
            $r_not_receptor = $this->filtro_and(filtro: $filtro);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener receptor', data: $r_not_receptor);
            }
            if($r_not_receptor->n_registros === 0){
                return $this->error->error(mensaje: 'Error no existe registro', data: $r_not_receptor);
            }
            if($r_not_receptor->n_registros > 1){
                return $this->error->error(mensaje: 'Error existe mas de un registro', data: $r_not_receptor);
            }
            $r_alta_bd = new stdClass();
            $r_alta_bd->registro_id = (int)$r_not_receptor->registro_id = $r_not_receptor->registros[0]['not_receptor_id'];
            $r_alta_bd->mensaje = "Registro existente";
            $r_alta_bd->sql = "NO SE EJECUTO SQL";
            $r_alta_bd->registro = $r_not_receptor->registro_id = $r_not_receptor->registros[0];
            $r_alta_bd->registro_obj = (object)$r_not_receptor->registro_id = $r_not_receptor->registros[0];
            $r_alta_bd->registro_ins = $this->registro;
            $r_alta_bd->campos = $this->campos_tabla;

        }

        return $r_alta_bd;
    }

    final public function not_receptor_id(string $email)
    {
        $filtro_rec['not_receptor.email'] = $email;
        $existe = $this->existe(filtro: $filtro_rec);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar receptor',data:  $existe);
        }

        if($existe){
            $not_receptor_id = $this->not_receptor_id_by_email(email: $email);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error obtener not_receptor_id',data:  $not_receptor_id);
            }
        }
        else{
            $not_receptor_ins['email'] = $email;
            $r_not_receptor = $this->alta_registro(registro: $not_receptor_ins);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error obtener r_not_receptor',data:  $r_not_receptor);
            }
            $not_receptor_id = $r_not_receptor->registro_id;
        }
        return $not_receptor_id;

    }

    private function not_receptor_id_by_email(string $email)
    {
        $filtro['not_receptor.email'] = $email;

        $r_not_receptor = $this->filtro_and(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener receptor', data: $r_not_receptor);
        }
        if($r_not_receptor->n_registros === 0){
            return $this->error->error(mensaje: 'Error no existe registro', data: $r_not_receptor);
        }
        if($r_not_receptor->n_registros > 1){
            return $this->error->error(mensaje: 'Error existe mas de un registro', data: $r_not_receptor);
        }

        return (int)$r_not_receptor->registros[0]['not_receptor_id'];

    }


}