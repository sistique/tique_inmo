<?php

namespace gamboamartin\inmuebles\models;

use base\orm\_modelo_parent;
use gamboamartin\documento\models\doc_documento;
use gamboamartin\documento\models\doc_documento_etapa;
use gamboamartin\errores\errores;
use gamboamartin\proceso\models\pr_etapa_proceso;
use gamboamartin\proceso\models\pr_proceso;
use PDO;
use stdClass;


class inm_doc_prospecto extends _modelo_parent
{
    public function __construct(PDO $link)
    {
        $tabla = 'inm_doc_prospecto';
        $columnas = array($tabla => false, 'inm_prospecto' => $tabla, 'doc_documento' => $tabla,
            'doc_tipo_documento' => 'doc_documento', 'doc_extension' => 'doc_documento');

        $campos_obligatorios = array('inm_prospecto_id', 'doc_documento_id');

        $columnas_extra = array();
        $renombres = array();

        $atributos_criticos = array('inm_prospecto_id', 'doc_documento_id');

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, renombres: $renombres,
            atributos_criticos: $atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;
        $this->etiqueta = 'Documentos de prospecto';
    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        $registro_doc['doc_tipo_documento_id'] = $this->registro['doc_tipo_documento_id'];
        $file = $_FILES['documento'];


        $r_alta_doc = (new doc_documento(link: $this->link))->alta_documento(registro: $registro_doc, file: $file);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al insertar doc', data: $r_alta_doc);
        }

        $this->registro['doc_documento_id'] = $r_alta_doc->registro_id;

        if (!isset($this->registro['descripcion'])) {
            $descripcion = $this->descripcion(r_alta_doc: $r_alta_doc, registro: $this->registro);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener descripcion', data: $descripcion);
            }
            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al insertar', data: $r_alta_bd);
        }

        $r_alta_doc_etapa = $this->genera_documento_etapa(doc_documento_id: $r_alta_doc->registro_id, etapa: "ALTA");
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al insertar etapa documento', data: $r_alta_bd);
        }

        return $r_alta_bd;
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $registro = $this->registro(registro_id: $id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener registro', data: $registro);
        }

        $documento_etapa = (new doc_documento_etapa(link: $this->link))->elimina_con_filtro_and(filtro: array('doc_documento_id' => $registro['doc_documento_id']));
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al eliminar documento etapa', data: $documento_etapa);
        }

        $elimina = parent::elimina_bd($id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al eliminar prospecto documento', data: $elimina);
        }

        $documento = (new doc_documento(link: $this->link))->elimina_bd(id: $registro['doc_documento_id']);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al eliminar documento', data: $documento);
        }

        return $elimina;
    }

    public function obtener_etapa(string $etapa): array|stdClass|int
    {
        $proceso = (new pr_proceso(link: $this->link))->filtro_and(filtro: array('pr_proceso.descripcion' => 'PROSPECTO DOCUMENTO'));
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al filtrar proceso', data: $proceso);
        }

        if ($proceso->n_registros <= 0) {
            return $this->error->error(mensaje: 'Error no existe un proceso con la descripción PROSPECTO DOCUMENTO',
                data: $proceso);
        }

        $filtro['pr_proceso_id'] = $proceso->registros[0]['pr_proceso_id'];
        $filtro['pr_etapa.descripcion'] = $etapa;
        $pr_etapa = (new pr_etapa_proceso(link: $this->link))->filtro_and(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al filtrar relación de etapa proceso', data: $etapa);
        }

        if ($pr_etapa->n_registros <= 0) {
            return $this->error->error(mensaje: "Error no existe una relación para el proceso PROSPECTO DOCUMENTO con la etapa $etapa",
                data: $pr_etapa);
        }

        return $pr_etapa->registros[0]['pr_etapa_proceso_id'];
    }

    public function genera_documento_etapa(int $doc_documento_id, string $etapa): array|stdClass
    {
        $pr_etapa = $this->obtener_etapa(etapa: $etapa);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener etapa', data: $pr_etapa);
        }

        $registro['doc_documento_id'] = $doc_documento_id;
        $registro['pr_etapa_proceso_id'] = $pr_etapa;
        $registro['fecha'] = date("Y-m-d");
        $alta = (new doc_documento_etapa(link: $this->link))->alta_registro(registro: $registro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al insertar documento etapa', data: $alta);
        }

        return $alta;
    }

    private function descripcion(stdClass $r_alta_doc, array $registro): string
    {
        $descripcion = $r_alta_doc->registro_id;
        $descripcion .= ' ' . $registro['doc_tipo_documento_id'];
        $descripcion .= ' ' . $r_alta_doc->registro_obj->doc_tipo_documento_descripcion;
        $descripcion .= ' ' . $r_alta_doc->registro_obj->doc_extension_descripcion;
        $descripcion .= ' ' . $registro['inm_prospecto_id'];
        $descripcion .= ' ' . $r_alta_doc->registro_obj->doc_documento_nombre;
        return $descripcion;
    }

    final public function inm_docs_prospecto(int $inm_prospecto, array $tipos_documentos)
    {
        $in = array();

        if (count($tipos_documentos) > 0) {
            $in['llave'] = 'doc_documento.doc_tipo_documento_id';
            $in['values'] = $tipos_documentos;
        }

        $r_inm_doc_prospecto = $this->filtro_and(filtro: array('inm_prospecto.id' => $inm_prospecto), in: $in);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener documentos', data: $r_inm_doc_prospecto);
        }

        return $r_inm_doc_prospecto->registros;
    }

}