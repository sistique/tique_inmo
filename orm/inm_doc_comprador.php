<?php

namespace gamboamartin\inmuebles\models;

use base\orm\_modelo_parent;
use config\generales;
use gamboamartin\documento\models\doc_documento;
use gamboamartin\documento\models\doc_documento_etapa;
use gamboamartin\errores\errores;
use gamboamartin\inmuebles\controllers\_doctos;
use PDO;
use stdClass;


class inm_doc_comprador extends _modelo_parent{
    public function __construct(PDO $link)
    {
        $tabla = 'inm_doc_comprador';
        $columnas = array($tabla=>false,'inm_comprador'=>$tabla,'doc_documento'=>$tabla,
            'doc_tipo_documento'=>'doc_documento','doc_extension'=>'doc_documento');

        $campos_obligatorios = array('inm_comprador_id','doc_documento_id');

        $columnas_extra= array();
        $sql = "(SELECT inm_dropbox_ruta.id_dropbox FROM inm_dropbox_ruta WHERE inm_dropbox_ruta.doc_documento_id = doc_documento.id)";
        $columnas_extra['inm_dropbox_ruta_id_dropbox'] = $sql;

        $renombres= array();

        $atributos_criticos = array('inm_comprador_id','doc_documento_id');

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, renombres: $renombres,
            atributos_criticos: $atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;
        $this->etiqueta = 'Documentos de comprador';
    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        $registro_doc['doc_tipo_documento_id'] = $this->registro['doc_tipo_documento_id'];
        $file = $_FILES['documento'];

        $confs = (new inm_conf_docs_comprador(link: $this->link))->registros();
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener configuraciones',data:  $confs);
        }

        $es_tipo_valido = false;
        foreach ($confs as $conf){
            if((int)$conf['doc_tipo_documento_id'] === (int)$this->registro['doc_tipo_documento_id']){
                $es_tipo_valido = true;
                break;
            }
        }

        if(!$es_tipo_valido){
            return $this->error->error(mensaje: 'Error el documento no es valido para la configuracion',data:  $confs);
        }

        if((new generales())->guarda_archivo_dropbox) {
            $registro_doc['ruta_relativa'] = 'inm_comprador/'.$this->registro['inm_comprador_id'].'/';
        }
        $r_alta_doc = (new doc_documento(link: $this->link))->alta_documento(registro: $registro_doc,file: $file);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar doc',data:  $r_alta_doc);
        }

        $this->registro['doc_documento_id'] = $r_alta_doc->registro_id;

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->descripcion(r_alta_doc: $r_alta_doc,registro:  $this->registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener descripcion',data:  $descripcion);
            }
            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }

        /*$inm_comprador = (new inm_comprador(link: $this->link))->registro(registro_id: $this->registro_id);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al obtener inm_comprador', data: $inm_comprador,
                header: $header, ws: $ws);
        }

        $inm_conf_docs_comprador = (new inm_conf_docs_comprador(link: $this->link))->filtro_and(
            columnas: ['doc_tipo_documento_id'],
            filtro: array('inm_attr_tipo_credito_id' => $inm_comprador['inm_attr_tipo_credito_id']));
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al obtener inm_conf_docs_comprador', data: $inm_conf_docs_comprador,
                header: $header, ws: $ws);
        }

        $doc_ids = array_map(function ($registro) {
            return $registro['doc_tipo_documento_id'];
        }, $inm_conf_docs_comprador->registros);

        $inm_conf_docs_comprador = (new _doctos())->documentos_de_comprador(
            inm_comprador_id: $this->registro['inm_comprador_id'],link:  $this->link,todos: false);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener configuraciones de documentos',data:  $inm_conf_docs_comprador);
        }



        $inm_docs_comprador = $this->inm_docs_comprador(inm_comprador_id: $this->registro['inm_comprador_id'],
            tipos_documentos: array());
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener documentos',data:  $inm_docs_comprador);
        }


        $existen_todos = true;
        $existen_algunos = false;
        foreach ($inm_conf_docs_comprador as $doc_tipo_documento){
            $existe = false;
            foreach ($inm_docs_comprador as $inm_doc_comprador){
                if($doc_tipo_documento['doc_tipo_documento_id'] === $inm_doc_comprador['doc_tipo_documento_id']){
                    $existe = true;
                    $existen_algunos = true;
                    break;
                }
            }
            if(!$existe){
                $existen_todos = false;
            }
        }

        if(!$existen_todos && $existen_algunos){
            $existen_algunos = true;
        }
        if($existen_todos && $existen_algunos){
            $existen_algunos = false;
        }


        if($existen_algunos ){

            $pr_comprador_proceso_ins['inm_comprador_id'] = $this->registro['inm_comprador_id'];
            $pr_comprador_proceso_ins['pr_sub_proceso_id'] = 4;
            $pr_comprador_proceso_ins['fecha'] = date('Y-m-d');
            $r_alta_proceso = (new inm_comprador_proceso(link: $this->link))->alta_registro(registro: $pr_comprador_proceso_ins);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar etapa',data:  $r_alta_proceso);
            }
        }

        if($existen_todos){

            $pr_comprador_proceso_ins['inm_comprador_id'] = $this->registro['inm_comprador_id'];
            $pr_comprador_proceso_ins['pr_sub_proceso_id'] = 5;
            $pr_comprador_proceso_ins['fecha'] = date('Y-m-d');
            $r_alta_proceso = (new inm_comprador_proceso(link: $this->link))->alta_registro(registro: $pr_comprador_proceso_ins);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al insertar etapa',data:  $r_alta_proceso);
            }
        }
*/

        return $r_alta_bd;
    }

    private function descripcion(stdClass $r_alta_doc, array $registro): string
    {
        $descripcion = $r_alta_doc->registro_id;
        $descripcion .= ' '.$registro['doc_tipo_documento_id'];
        $descripcion .= ' '.$r_alta_doc->registro_obj->doc_tipo_documento_descripcion;
        $descripcion .= ' '.$r_alta_doc->registro_obj->doc_extension_descripcion;
        $descripcion .= ' '.$registro['inm_comprador_id'];
        $descripcion .= ' '.$r_alta_doc->registro_obj->doc_documento_nombre;
        return $descripcion;
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $registro = $this->registro(registro_id: $id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener registro', data: $registro);
        }

        $documento_etapa = (new doc_documento_etapa(link: $this->link))->elimina_con_filtro_and(filtro: array('doc_documento_id' => $registro['doc_documento_id']));
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al eliminar documento etapa', data: $documento_etapa);
        }

        $elimina = parent::elimina_bd($id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al eliminar prospecto documento', data: $elimina);
        }

        $documento = (new doc_documento(link: $this->link))->elimina_bd(id: $registro['doc_documento_id']);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al eliminar documento', data: $documento);
        }

        return $elimina;
    }

    final public function inm_docs_comprador(int $inm_comprador_id, array $tipos_documentos)
    {
        $in = array();

        if (count($tipos_documentos) > 0) {
            $in['llave'] = 'doc_documento.doc_tipo_documento_id';
            $in['values'] = $tipos_documentos;
        }

        $r_inm_doc_prospecto = $this->filtro_and(filtro: array('inm_comprador.id' => $inm_comprador_id,
            'inm_doc_comprador.es_foto' => 'inactivo'), in: $in);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener documentos', data: $r_inm_doc_prospecto);
        }

        return $r_inm_doc_prospecto->registros;
    }

}