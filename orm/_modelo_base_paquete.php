<?php
namespace gamboamartin\inmuebles\models;

use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use stdClass;

class _modelo_base_paquete extends _modelo_parent{

    protected string $key_entidad_base_id = '';
    protected string $key_entidad_id = '';


    /**
     * Integra una descripcion de comprador_proceso
     * @param string $key_entidad_base_id
     * @param string $key_entidad_id
     * @param array $registro Registro en proceso
     * @return string|array
     * @version 2.98.0
     */
    protected function descripcion(string $key_entidad_base_id, string $key_entidad_id, array $registro): string|array
    {

        $valida = $this->valida_init(key_entidad_base_id: $key_entidad_base_id,key_entidad_id: $key_entidad_id,
            registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $registro', data: $valida);
        }

        $descripcion = $registro[$key_entidad_base_id];
        $descripcion .= ' '.$registro[$key_entidad_id];
        $descripcion .= ' '.$registro['fecha'];
        $descripcion .= ' '.time();
        return trim($descripcion);
    }

    /**
     * Inicializa un registro para su modificacion|alta
     * @param string $key_entidad_base_id
     * @param string $key_entidad_id
     * @param array $registro Registro en proceso
     * @return array
     * @version 2.98.0
     */
    public function init_row(string $key_entidad_base_id, string $key_entidad_id, array $registro): array
    {

        $valida = $this->valida_init(key_entidad_base_id: $key_entidad_base_id, key_entidad_id: $key_entidad_id,
            registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $registro', data: $valida);
        }
        if(!isset($registro['descripcion'])){

            $registro = $this->integra_descripcion(key_entidad_base_id: $key_entidad_base_id,
                key_entidad_id: $key_entidad_id, registro: $registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al integrar descripcion',data:  $registro);
            }

        }
        return $registro;
    }

    /**
     * Integra una descripcion en registro para su transaccion
     * @param string $key_entidad_base_id
     * @param string $key_entidad_id
     * @param array $registro Registro en proceso
     * @return array
     * @version 2.98.0
     */
    private function integra_descripcion(string $key_entidad_base_id, string $key_entidad_id, array $registro): array
    {

        $valida = $this->valida_init(key_entidad_base_id: $key_entidad_base_id, key_entidad_id: $key_entidad_id,
            registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $registro', data: $valida);
        }

        $descripcion = $this->descripcion(key_entidad_base_id: $key_entidad_base_id, key_entidad_id: $key_entidad_id,
            registro: $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener descripcion',data:  $descripcion);
        }

        $registro['descripcion'] = $descripcion;
        return $registro;
    }



    /**
     * Modifica una entidad
     * @param array $registro registro con datos a modificar
     * @param int $id Identificador de registro
     * @param bool $reactiva Si reactiva validara estados de etapa
     * @param array $keys_integra_ds Keys para integracion de descripcion select
     * @return array|stdClass
     * @version 2.101.0
     */
    public function modifica_bd(array $registro, int $id, bool $reactiva = false,
                                array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        if($id<=0){
            return $this->error->error(mensaje: 'Error id debe ser mayor a 0',data: $registro);
        }
        $r_modifica_bd = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub

        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar',data:  $r_modifica_bd);
        }

        $registro = (new _base_paquete())->init_data_row(id: $id,
            key_entidad_base_id: $this->key_entidad_base_id, key_entidad_id: $this->key_entidad_id, modelo: $this);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al inicializar datos',data:  $registro);
        }
        $r_modifica_bd_ds = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,
            keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub

        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar descripcion',data:  $r_modifica_bd_ds);
        }

        return $r_modifica_bd;

    }

    /**
     * Valida que los elementos para una integracion de etapa sean validos
     * @param string $key_entidad_base_id Key de la entidad base comprador, inmueble
     * @param string $key_entidad_id Key de la entidad de tipo proceso
     * @param array $registro Registro en proceso
     * @return bool|array
     * @version 2.99.0
     */
    final public function valida_init(string $key_entidad_base_id, string $key_entidad_id,array $registro): bool|array
    {
        $key_entidad_base_id = trim($key_entidad_base_id);
        if($key_entidad_base_id === ''){
            return $this->error->error(mensaje: 'Error key_entidad_base_id esta vacio', data: $key_entidad_base_id);
        }
        $key_entidad_id = trim($key_entidad_id);
        if($key_entidad_id === ''){
            return $this->error->error(mensaje: 'Error key_entidad_id esta vacio', data: $key_entidad_id);
        }

        $keys = array($key_entidad_base_id,$key_entidad_id,'fecha');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $registro', data: $valida);
        }
        $keys = array($key_entidad_base_id,$key_entidad_id);
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $registro', data: $valida);
        }

        $keys = array('fecha');
        $valida = $this->validacion->fechas_in_array(data: $registro, keys: $keys);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar $registro', data: $valida);
        }
        return true;
    }

}
