<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\inmuebles\controllers;

use base\controller\init;
use gamboamartin\errores\errores;
use gamboamartin\inmuebles\html\_base;
use gamboamartin\inmuebles\html\inm_comprador_html;
use gamboamartin\inmuebles\html\inm_referencia_html;
use gamboamartin\inmuebles\models\_base_paquete;
use gamboamartin\inmuebles\models\_inm_comprador;
use gamboamartin\inmuebles\models\_upd_prospecto;
use gamboamartin\inmuebles\models\inm_beneficiario;
use gamboamartin\inmuebles\models\inm_comprador;
use gamboamartin\inmuebles\models\inm_referencia;
use gamboamartin\inmuebles\models\inm_referencia_prospecto;
use gamboamartin\inmuebles\models\inm_rel_cliente_valuador;
use gamboamartin\inmuebles\models\inm_rel_comprador_com_cliente;
use gamboamartin\inmuebles\models\inm_ubicacion;
use gamboamartin\system\_ctl_base;
use gamboamartin\system\links_menu;
use gamboamartin\template\html;
use html\doc_tipo_documento_html;
use html\dp_estado_html;
use html\dp_municipio_html;
use PDO;
use setasign\Fpdi\Fpdi;
use stdClass;

class controlador_inm_comprador extends _ctl_base {

    public array $inm_ubicaciones = array();
    public array $inm_clientes_valuadores = array();
    public array $inm_co_acreditados = array();
    public array $inm_conf_docs_comprador = array();

    public string $link_inm_doc_comprador_alta_bd = '';

    public string $link_rel_ubi_comp_alta_bd = '';

    public string $link_asigna_avaluo_bd = '';
    public string $link_asigna_firma_bd = '';
    public string $link_asigna_escritura_bd = '';
    public string $link_inm_rel_cliente_valuador_alta_bd = '';
    public string $link_inm_rel_co_acred_alta_bd = '';
    public string $link_asigna_nuevo_co_acreditado_bd = '';

    public inm_comprador_html $html_entidad;

    public stdClass $header_frontend;

    public bool $aplica_seccion_co_acreditado = false;

    public array $inm_referencias = array();
    public array $beneficiarios = array();
    public array $referencias = array();



    public function __construct(PDO      $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass())
    {
        $modelo = new inm_comprador(link: $link);
        $html_ = new inm_comprador_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id:  $this->registro_id);

        $datatables = $this->init_datatable();
        if(errores::$error){
            $error = $this->errores->error(mensaje: 'Error al inicializar datatable',data: $datatables);
            print_r($error);
            die('Error');
        }

        parent::__construct(html:$html_, link: $link,modelo:  $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);

        $this->html_entidad = $html_;

        $this->header_frontend = new stdClass();
    }

    /**
     * Integra formulario de alta
     * @param bool $header Si header retorna resultado en web
     * @param bool $ws Si ws muestra resultado en json
     * @return array|string
     */
    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta = $this->init_alta();
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al inicializar alta',data:  $r_alta, header: $header,ws:  $ws);
        }

        $inputs = (new _base(html: $this->html_base))->data_front_alta(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $inputs, header: $header,ws:  $ws);
        }

        return $r_alta;
    }

    /**
     * Formulario para la integracion de un co acreditado
     * @param bool $header Si header retorna resultado en web
     * @param bool $ws Si ws muestra resultado en json
     * @return array|stdClass
     * @version 1.150.1
     */
    public function asigna_co_acreditado(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }


        $inputs = (new _keys_selects())->base_plantilla(controler: $this,function: __FUNCTION__);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,
                ws:  $ws);
        }

        $link_inm_rel_co_acred_alta_bd = $this->obj_link->link_alta_bd(link: $this->link,seccion: 'inm_rel_co_acred');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_inm_rel_co_acred_alta_bd,
                header: $header,ws:  $ws);
        }

        $this->link_inm_rel_co_acred_alta_bd = $link_inm_rel_co_acred_alta_bd;

        $inm_co_acreditados = (new _inm_comprador())->inm_co_acreditados(inm_comprador_id: $this->registro_id,
            link:  $this->link);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener compradores',data:  $inm_co_acreditados,
                header: $header,ws:  $ws);
        }

        $this->inm_co_acreditados = $inm_co_acreditados;

        return $r_modifica;
    }

    public function asigna_nuevo_co_acreditado(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = (new _keys_selects())->base_co_acreditado(controler: $this,function: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }


        return $r_modifica;
    }

    final public function asigna_nuevo_co_acreditado_bd(bool $header, bool $ws = false): array|stdClass{

        $this->link->beginTransaction();

        $retorno = (new \gamboamartin\inmuebles\controllers\_base())->init_retorno();
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al obtener datos de retorno', data: $retorno,
                header: true, ws: false);
        }

        $inm_comprador_id = $this->registro_id;
        $inm_co_acreditado_ins['nss'] = $_POST['nss'];
        $inm_co_acreditado_ins['curp'] = $_POST['curp'];
        $inm_co_acreditado_ins['rfc'] = $_POST['rfc'];
        $inm_co_acreditado_ins['apellido_paterno'] = $_POST['apellido_paterno'];
        $inm_co_acreditado_ins['apellido_materno'] = $_POST['apellido_materno'];
        $inm_co_acreditado_ins['nombre'] = $_POST['nombre'];
        $inm_co_acreditado_ins['lada'] = $_POST['lada'];
        $inm_co_acreditado_ins['numero'] = $_POST['numero'];
        $inm_co_acreditado_ins['celular'] = $_POST['celular'];
        $inm_co_acreditado_ins['genero'] = $_POST['genero'];
        $inm_co_acreditado_ins['correo'] = $_POST['correo'];
        $inm_co_acreditado_ins['nombre_empresa_patron'] = $_POST['nombre_empresa_patron'];
        $inm_co_acreditado_ins['nrp'] = $_POST['nrp'];
        $inm_co_acreditado_ins['lada_nep'] = $_POST['lada_nep'];
        $inm_co_acreditado_ins['numero_nep'] = $_POST['numero_nep'];
        $inm_co_acreditado_ins['extension_nep'] = $_POST['extension_nep'];

        $result = (new inm_comprador(link: $this->link))->asigna_nuevo_co_acreditado_bd(
            inm_comprador_id: $inm_comprador_id, inm_co_acreditado: $inm_co_acreditado_ins);

        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al insertar datos',data:  $result,header:  $header,ws:  $ws);
        }
        $this->link->commit();


        $out = (new \gamboamartin\inmuebles\controllers\_base())->out(controlador: $this,header:  $header,
            result:  $result,retorno:  $retorno, ws: $ws);
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al dar salida', data: $out,
                header: true, ws: false);
        }

        $result->siguiente_view = $retorno->siguiente_view;


        return $result;
    }

    /**
     * Integra un formulario para la asignacion de una ubicacion
     * @param bool $header Si header retorna resultado en web
     * @param bool $ws Si ws muestra resultado en json
     * @return array|stdClass
     * @version 1.105.1
     */
    public function asigna_ubicacion(bool $header, bool $ws = false): array|stdClass
    {

        $registro = $this->modelo->registro(registro_id: $this->registro_id,retorno_obj: true);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }


        $hiddens = (new _keys_selects())->hiddens(controler: $this,funcion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $hiddens,
                header: $header,ws:  $ws);
        }

        $inputs = (new _keys_selects())->inputs_form_base(btn_action_next: $hiddens->btn_action_next,
            controler: $this, id_retorno: $hiddens->id_retorno, in_registro_id: $hiddens->in_registro_id,
            inm_comprador_id: $inm_comprador_id, inm_ubicacion_id: '', precio_operacion: $hiddens->precio_operacion,
            seccion_retorno: $hiddens->seccion_retorno);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,ws:  $ws);
        }

        $extra_params_keys[] = 'inm_ubicacion_precio';
        $ubicaciones_con_precio = (new inm_ubicacion(link: $this->link))->ubicaciones_con_precio(etapa: 'ALTA',
            inm_comprador_id:  $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener ubicaciones con precio',data:  $ubicaciones_con_precio,
                header: $header,ws:  $ws);
        }

        $inm_ubicacion_id = (new _inm_comprador())->inm_ubicacion_id_input(controler: $this,
            extra_params_keys: $extra_params_keys, registros: $ubicaciones_con_precio);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al inm_ubicacion_id',data:  $inm_ubicacion_id,
                header: $header,ws:  $ws);
        }

        $this->inputs->inm_ubicacion_id = $inm_ubicacion_id;

        $link_rel_ubi_comp_alta_bd = $this->obj_link->link_alta_bd(link: $this->link,seccion: 'inm_rel_ubi_comp');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_rel_ubi_comp_alta_bd,
                header: $header,ws:  $ws);
        }

        $this->link_rel_ubi_comp_alta_bd = $link_rel_ubi_comp_alta_bd;

        $inm_ubicaciones = (new _inm_comprador())->inm_ubicaciones(inm_comprador_id: $this->registro_id,
            link:  $this->link);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener compradores',data:  $inm_ubicaciones,
                header: $header,ws:  $ws);
        }

        $this->inm_ubicaciones = $inm_ubicaciones;

        $this->keys_selects = array_merge($keys_selects, $this->keys_selects);

        return $base;
    }

    public function asigna_autorizacion(bool $header, bool $ws = false): array|stdClass
    {
        $filtro['inm_comprador.id']= $this->registro_id;
        $registro = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $documento_sic = $this->html->input_file(cols: 12,name: 'sic',row_upd:  new stdClass(),value_vacio:  false,
            place_holder: 'SIC');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_sic, header: $header,ws:  $ws);
        }

        $this->inputs->documento_sic = $documento_sic;

        $documento_constancia_credito = $this->html->input_file(cols: 12,name: 'constancia_credito',
            row_upd:  new stdClass(),value_vacio:  false,place_holder: 'Constancia de Credito');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_constancia_credito, header: $header,ws:  $ws);
        }

        $this->inputs->documento_constancia_credito = $documento_constancia_credito;

        $columns_ds = array('com_cliente_rfc','com_cliente_razon_social');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'com_cliente_id',
            keys_selects:$keys_selects, id_selected: $registro->registros[0]['com_cliente_id'], label: 'Cliente',
            columns_ds : $columns_ds,disabled: true);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }

        $hiddens = (new _keys_selects())->hiddens(controler: $this,funcion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $hiddens,
                header: $header,ws:  $ws);
        }

        $inputs = (new _keys_selects())->inputs_form_base(btn_action_next: $hiddens->btn_action_next,
            controler: $this, id_retorno: $hiddens->id_retorno, in_registro_id: $hiddens->in_registro_id,
            inm_comprador_id: $inm_comprador_id, inm_ubicacion_id: '', precio_operacion: $hiddens->precio_operacion,
            seccion_retorno: $hiddens->seccion_retorno);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,ws:  $ws);
        }

        $link_asigna_avaluo_bd = $this->obj_link->link_con_id(accion:'asigna_ubicacion_bd',
            link: $this->link,registro_id: $this->registro_id,seccion: 'inm_comprador');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_asigna_avaluo_bd,
                header: $header,ws:  $ws);
        }

        $this->link_asigna_avaluo_bd = $link_asigna_avaluo_bd;

        $this->keys_selects = array_merge($keys_selects, $this->keys_selects);

        return $base;
    }

    public function asigna_firma(bool $header, bool $ws = false): array|stdClass
    {
        $filtro['inm_comprador.id']= $this->registro_id;
        $registro = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $documento_anexos = $this->html->input_file(cols: 12,name: 'anexos',row_upd:  new stdClass(),value_vacio:  false,
            place_holder: 'Anexos');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_anexos, header: $header,ws:  $ws);
        }

        $this->inputs->documento_anexos = $documento_anexos;

        $documento_instruccion_credito = $this->html->input_file(cols: 12,name: 'instruccion_credito',
            row_upd:  new stdClass(),value_vacio:  false,place_holder: 'Instruccion de Credito');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_instruccion_credito, header: $header,ws:  $ws);
        }

        $this->inputs->documento_instruccion_credito = $documento_instruccion_credito;

        $documento_notificacion_descuento = $this->html->input_file(cols: 12,name: 'notificacion_descuento',
            row_upd:  new stdClass(),value_vacio:  false,place_holder: 'Notificacion de Descuento');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_notificacion_descuento, header: $header,ws:  $ws);
        }

        $this->inputs->documento_notificacion_descuento = $documento_notificacion_descuento;

        $documento_isr_notaria = $this->html->input_file(cols: 12,name: 'isr_notaria',
            row_upd:  new stdClass(),value_vacio:  false,place_holder: 'ISR Notaria');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_isr_notaria, header: $header,ws:  $ws);
        }

        $this->inputs->documento_isr_notaria = $documento_isr_notaria;

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'isr',
            keys_selects:$keys_selects, place_holder: 'ISR');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }

        $hiddens = (new _keys_selects())->hiddens(controler: $this,funcion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $hiddens,
                header: $header,ws:  $ws);
        }

        $inputs = (new _keys_selects())->inputs_form_base(btn_action_next: $hiddens->btn_action_next,
            controler: $this, id_retorno: $hiddens->id_retorno, in_registro_id: $hiddens->in_registro_id,
            inm_comprador_id: $inm_comprador_id, inm_ubicacion_id: '', precio_operacion: $hiddens->precio_operacion,
            seccion_retorno: $hiddens->seccion_retorno);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,ws:  $ws);
        }

        $link_asigna_firma_bd = $this->obj_link->link_con_id(accion:'asigna_firma_bd',
            link: $this->link,registro_id: $this->registro_id,seccion: 'inm_comprador');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_asigna_firma_bd,
                header: $header,ws:  $ws);
        }

        $this->link_asigna_firma_bd = $link_asigna_firma_bd;

        $this->keys_selects = array_merge($keys_selects, $this->keys_selects);

        return $base;
    }

    public function asigna_escritura(bool $header, bool $ws = false): array|stdClass
    {

        $filtro['inm_comprador.id']= $this->registro_id;
        $registro = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $documento_validacion_poder = $this->html->input_file(cols: 12,name: 'validacion_poder',row_upd:  new stdClass(),value_vacio:  false,
            place_holder: 'Validacion Poder');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_validacion_poder, header: $header,ws:  $ws);
        }

        $this->inputs->documento_validacion_poder = $documento_validacion_poder;

        $documento_acuse_patron = $this->html->input_file(cols: 12,name: 'acuse_patron',
            row_upd:  new stdClass(),value_vacio:  false,place_holder: 'Acuse de Patron');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_acuse_patron, header: $header,ws:  $ws);
        }

        $this->inputs->documento_acuse_patron = $documento_acuse_patron;

        $documento_escrituras = $this->html->input_file(cols: 12,name: 'escrituras',
            row_upd:  new stdClass(),value_vacio:  false,place_holder: 'Escrituras');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento_escrituras, header: $header,ws:  $ws);
        }

        $this->inputs->documento_escrituras = $documento_escrituras;

        $fecha = $this->html->input_fecha(cols: 6, row_upd: $this->row_upd,value_vacio:  false);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar fecha',
                data:  $fecha, header: $header,ws: $ws);
        }

        $this->inputs->fecha = $fecha;

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_escritura',
            keys_selects: $keys_selects, place_holder: 'No. Escritura');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }

        $hiddens = (new _keys_selects())->hiddens(controler: $this,funcion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $hiddens,
                header: $header,ws:  $ws);
        }

        $inputs = (new _keys_selects())->inputs_form_base(btn_action_next: $hiddens->btn_action_next,
            controler: $this, id_retorno: $hiddens->id_retorno, in_registro_id: $hiddens->in_registro_id,
            inm_comprador_id: $inm_comprador_id, inm_ubicacion_id: '', precio_operacion: $hiddens->precio_operacion,
            seccion_retorno: $hiddens->seccion_retorno);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,ws:  $ws);
        }

        $link_asigna_escritura_bd = $this->obj_link->link_con_id(accion:'asigna_escritura_bd',
            link: $this->link,registro_id: $this->registro_id,seccion: 'inm_comprador');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_asigna_escritura_bd,
                header: $header,ws:  $ws);
        }

        $this->link_asigna_escritura_bd = $link_asigna_escritura_bd;

        $this->keys_selects = array_merge($keys_selects, $this->keys_selects);

        return $base;
    }

    public function proceso_cliente(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }

        $asigna_ubicacion = $this->asigna_ubicacion($header);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $asigna_ubicacion,header: $header,ws: $ws);
        }

        $asigna_valuador = $this->asigna_valuador($header);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $asigna_valuador,header: $header,ws: $ws);
        }

        $asigna_avaluo = $this->asigna_avaluo($header);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $asigna_avaluo,header: $header,ws: $ws);
        }

        $asigna_autorizacion = $this->asigna_autorizacion($header);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $asigna_autorizacion,header: $header,ws: $ws);
        }

        $asigna_firma = $this->asigna_firma($header);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $asigna_firma,header: $header,ws: $ws);
        }

        $asigna_escritura = $this->asigna_escritura($header);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $asigna_escritura,header: $header,ws: $ws);
        }

        $base = $this->base_upd(keys_selects: $this->keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        return $r_modifica;
    }


    public function asigna_avaluo(bool $header, bool $ws = false): array|stdClass
    {

        $filtro['inm_comprador.id']= $this->registro_id;
        $registro = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'mts_terrenos',
            keys_selects:$keys_selects, place_holder: 'Metros de Terreno');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'mts_construidos',
            keys_selects:$keys_selects, place_holder: 'Metros de Construidos');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'valor_avaluo',
            keys_selects:$keys_selects, place_holder: 'Valor Avaluo');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $documento = $this->html->input_file(cols: 12,name: 'avaluo',row_upd:  new stdClass(),value_vacio:  false);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento, header: $header,ws:  $ws);
        }

        $this->inputs->documento = $documento;

        $columns_ds = array('com_cliente_rfc','com_cliente_razon_social');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'com_cliente_id',
            keys_selects:$keys_selects, id_selected: $registro->registros[0]['com_cliente_id'], label: 'Cliente',
            columns_ds : $columns_ds,disabled: true);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }

        $hiddens = (new _keys_selects())->hiddens(controler: $this,funcion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $hiddens,
                header: $header,ws:  $ws);
        }

        $inputs = (new _keys_selects())->inputs_form_base(btn_action_next: $hiddens->btn_action_next,
            controler: $this, id_retorno: $hiddens->id_retorno, in_registro_id: $hiddens->in_registro_id,
            inm_comprador_id: $inm_comprador_id, inm_ubicacion_id: '', precio_operacion: $hiddens->precio_operacion,
            seccion_retorno: $hiddens->seccion_retorno);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,ws:  $ws);
        }

        $link_asigna_avaluo_bd = $this->obj_link->link_con_id(accion:'asigna_ubicacion_bd',
            link: $this->link,registro_id: $this->registro_id,seccion: 'inm_comprador');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_asigna_avaluo_bd,
                header: $header,ws:  $ws);
        }

        $this->link_asigna_avaluo_bd = $link_asigna_avaluo_bd;

        $this->keys_selects = array_merge($keys_selects, $this->keys_selects);

        return $base;
    }

    final public function asigna_avaluo_bd(bool $header, bool $ws = false): array|stdClass{

        $this->link->beginTransaction();

        $retorno = (new \gamboamartin\inmuebles\controllers\_base())->init_retorno();
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al obtener datos de retorno', data: $retorno,
                header: true, ws: false);
        }

        $inm_comprador_id = $this->registro_id;
        $inm_co_acreditado_ins['nss'] = $_POST['nss'];
        $inm_co_acreditado_ins['curp'] = $_POST['curp'];
        $inm_co_acreditado_ins['rfc'] = $_POST['rfc'];
        $inm_co_acreditado_ins['apellido_paterno'] = $_POST['apellido_paterno'];
        $inm_co_acreditado_ins['apellido_materno'] = $_POST['apellido_materno'];
        $inm_co_acreditado_ins['nombre'] = $_POST['nombre'];
        $inm_co_acreditado_ins['lada'] = $_POST['lada'];
        $inm_co_acreditado_ins['numero'] = $_POST['numero'];
        $inm_co_acreditado_ins['celular'] = $_POST['celular'];
        $inm_co_acreditado_ins['genero'] = $_POST['genero'];
        $inm_co_acreditado_ins['correo'] = $_POST['correo'];
        $inm_co_acreditado_ins['nombre_empresa_patron'] = $_POST['nombre_empresa_patron'];
        $inm_co_acreditado_ins['nrp'] = $_POST['nrp'];
        $inm_co_acreditado_ins['lada_nep'] = $_POST['lada_nep'];
        $inm_co_acreditado_ins['numero_nep'] = $_POST['numero_nep'];
        $inm_co_acreditado_ins['extension_nep'] = $_POST['extension_nep'];

        $result = (new inm_comprador(link: $this->link))->asigna_nuevo_co_acreditado_bd(
            inm_comprador_id: $inm_comprador_id, inm_co_acreditado: $inm_co_acreditado_ins);

        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al insertar datos',data:  $result,header:  $header,ws:  $ws);
        }
        $this->link->commit();


        $out = (new \gamboamartin\inmuebles\controllers\_base())->out(controlador: $this,header:  $header,
            result:  $result,retorno:  $retorno, ws: $ws);
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al dar salida', data: $out,
                header: true, ws: false);
        }

        $result->siguiente_view = $retorno->siguiente_view;


        return $result;
    }

    public function asigna_valuador(bool $header, bool $ws = false): array|stdClass
    {

        $filtro_rel['inm_comprador.id'] = $this->registro_id;
        $registro = (new inm_rel_comprador_com_cliente($this->link))->filtro_and(filtro: $filtro_rel);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $columns_ds = array('inm_valuador_descripcion');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'inm_valuador_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Valuador', columns_ds : $columns_ds);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $columns_ds = array('com_cliente_rfc','com_cliente_razon_social');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'com_cliente_id',
            keys_selects:$keys_selects, id_selected: $registro->registros[0]['com_cliente_id'], label: 'Cliente',
            columns_ds : $columns_ds);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $link_inm_rel_cliente_valuador_alta_bd = $this->obj_link->link_alta_bd(link: $this->link,seccion: 'inm_rel_cliente_valuador');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_inm_rel_cliente_valuador_alta_bd,
                header: $header,ws:  $ws);
        }

        /*$this->link_inm_rel_cliente_valuador_alta_bd = $link_inm_rel_cliente_valuador_alta_bd;
        $filtro['com_cliente.id'] = $registro->registros[0]['com_cliente_id'];
        $inm_clientes_valuadores = (new inm_rel_cliente_valuador($this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener compradores',data:  $inm_clientes_valuadores,
                header: $header,ws:  $ws);
        }
        $this->inm_clientes_valuadores = (array)$inm_clientes_valuadores->registros;*/
        $this->keys_selects = array_merge($keys_selects, $this->keys_selects);

        return $base;
    }


    /**
     * Integra los campos para las vistas de frontend base
     * @return array
     * @version 1.106.1
     */
    protected function campos_view(): array
    {
        $keys = new stdClass();
        $keys->inputs = array('descripcion', 'es_segundo_credito', 'descuento_pension_alimenticia_dh',
            'descuento_pension_alimenticia_fc','monto_credito_solicitado_dh','monto_ahorro_voluntario','nss','curp',
            'rfc','apellido_paterno','apellido_materno','nombre','numero_exterior','numero_interior','telefono',
            'nombre_empresa_patron','nrp_nep','lada_nep','numero_nep','extension_nep','lada_com','numero_com',
            'cel_com','genero','correo_com','fecha_nacimiento','sub_cuenta','monto_final','descuento','puntos',
            'telefono_casa','correo_empresa','mts_construidos','mts_terrenos','valor_avaluo','numero_escritura','isr');
        $keys->selects = array();


        $init_data = array();
        $init_data['inm_producto_infonavit'] = "gamboamartin\\inmuebles";
        $init_data['inm_attr_tipo_credito'] = "gamboamartin\\inmuebles";
        $init_data['inm_destino_credito'] = "gamboamartin\\inmuebles";
        $init_data['inm_plazo_credito_sc'] = "gamboamartin\\inmuebles";
        $init_data['inm_tipo_discapacidad'] = "gamboamartin\\inmuebles";
        $init_data['inm_persona_discapacidad'] = "gamboamartin\\inmuebles";
        $init_data['inm_estado_civil'] = "gamboamartin\\inmuebles";
        $init_data['inm_institucion_hipotecaria'] = "gamboamartin\\inmuebles";
        $init_data['inm_sindicato'] = "gamboamartin\\inmuebles";
        $init_data['inm_nacionalidad'] = "gamboamartin\\inmuebles";
        $init_data['inm_ocupacion'] = "gamboamartin\\inmuebles";
        $init_data['inm_valuador'] = "gamboamartin\\inmuebles";
        $init_data['com_cliente'] = "gamboamartin\\comercial";

        $init_data = (new _base_paquete())->init_data_domicilio(init_data: $init_data);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar campo view',data:  $init_data);
        }

        $init_data['cat_sat_regimen_fiscal'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_moneda'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_forma_pago'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_metodo_pago'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_uso_cfdi'] = "gamboamartin\\cat_sat";
        $init_data['com_tipo_cliente'] = "gamboamartin\\comercial";
        $init_data['cat_sat_tipo_persona'] = "gamboamartin\\cat_sat";

        $init_data['bn_cuenta'] = "gamboamartin\\banco";

        $campos_view = $this->campos_view_base(init_data: $init_data,keys:  $keys);

        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar campo view',data:  $campos_view);
        }


        return $campos_view;
    }

    public function co_acreditados(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = (new _keys_selects())->base_co_acreditado(controler: $this,function: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }


        return $r_modifica;
    }

    final public function documentos(bool $header, bool $ws = false): array
    {

        $template = $this->modifica(header: false);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $template, header: $header,ws:  $ws);
        }

        $inm_conf_docs_comprador = (new _inm_comprador())->integra_inm_documentos(controler: $this);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar buttons',data:  $inm_conf_docs_comprador, header: $header,ws:  $ws);
        }

        $this->inm_conf_docs_comprador = $inm_conf_docs_comprador;


        return $inm_conf_docs_comprador;

    }

    /**
     * Inicializa los elementos mostrables para datatables
     * @return stdClass
     * @version 1.40.0
     */
    private function init_datatable(): stdClass
    {
        $columns["inm_comprador_id"]["titulo"] = "Id";
        $columns["inm_comprador_nombre"]["titulo"] = "Nombre";
        $columns["inm_comprador_apellido_paterno"]["titulo"] = "AP";
        $columns["inm_comprador_apellido_materno"]["titulo"] = "AM";
        $columns["inm_comprador_nss"]["titulo"] = "NSS";
        $columns["inm_comprador_curp"]["titulo"] = "CURP";
        $columns["inm_comprador_etapa"]["titulo"] = "Etapa";
        $columns["inm_comprador_proceso"]["titulo"] = "Proceso Actual";
        $columns["inm_institucion_hipotecaria_descripcion"]["titulo"] = "Institucion Hip";


        $filtro = array("inm_comprador.id",'inm_comprador.nombre','inm_comprador.apellido_paterno',
            'inm_comprador.apellido_materno','inm_comprador.nss','inm_comprador.curp','inm_comprador.proceso',
            'inm_institucion_hipotecaria.descripcion');

        $datatables = new stdClass();
        $datatables->columns = $columns;
        $datatables->filtro = $filtro;

        return $datatables;
    }
    protected function key_selects_txt(array $keys_selects): array
    {


        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'descuento_pension_alimenticia_dh',
            keys_selects:$keys_selects, place_holder: 'Descuento Pension Alimenticia Derechohabiente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'descuento_pension_alimenticia_fc',
            keys_selects:$keys_selects, place_holder: 'Descuento Pension Alimenticia Familiar/Corresidente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'monto_credito_solicitado_dh',
            keys_selects:$keys_selects, place_holder: 'Monto Credito Solicitado Derechohabiente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'monto_ahorro_voluntario',
            keys_selects:$keys_selects, place_holder: 'Monto Ahorro Voluntario');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new _keys_selects())->keys_base_cliente(keys_selects: $keys_selects);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }


        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_exterior',
            keys_selects:$keys_selects, place_holder: 'Exterior');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_interior',
            keys_selects:$keys_selects, place_holder: 'Interior', required: false);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'telefono',
            keys_selects:$keys_selects, place_holder: 'Telefono');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'lada_com', keys_selects:$keys_selects,
            place_holder: 'Lada');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects['lada_com']->regex = $this->validacion->patterns['lada_html'];

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_com',
            keys_selects:$keys_selects, place_holder: 'Numero');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects['numero_com']->regex = $this->validacion->patterns['tel_sin_lada_html'];

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'cel_com',
            keys_selects:$keys_selects, place_holder: 'Celular');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects['cel_com']->regex = $this->validacion->patterns['telefono_mx_html'];

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'genero',
            keys_selects:$keys_selects, place_holder: 'Genero');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'correo_com',
            keys_selects:$keys_selects, place_holder: 'Correo');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects['correo_com']->regex = $this->validacion->patterns['correo_html_base'];

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'sub_cuenta',
            keys_selects:$keys_selects, place_holder: 'Sub Cuenta');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'monto_final',
            keys_selects:$keys_selects, place_holder: 'Monto Final');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'descuento',
            keys_selects:$keys_selects, place_holder: 'Descuento');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'puntos',
            keys_selects:$keys_selects, place_holder: 'Puntos');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'telefono_casa',
            keys_selects:$keys_selects, place_holder: 'Telefono de Casa');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects['telefono_casa']->regex = $this->validacion->patterns['telefono_mx_html'];


        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'correo_empresa',
            keys_selects:$keys_selects, place_holder: 'Correo Empresa');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects['correo_empresa']->regex = $this->validacion->patterns['correo_html_base'];



        return $keys_selects;
    }

    /**
     * Genera la vista de modifica
     * @param bool $header Si header retorna resultado en web
     * @param bool $ws Si ws muestra resultado en json
     * @return array|stdClass
     */
    public function modifica(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_base(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $radios = (new _inm_comprador())->radios_chk(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar radios',data:  $radios, header: $header,ws:  $ws);
        }

        $sl_dp_estado_nacimiento_id = (new dp_estado_html(html: $this->html_base))->select_dp_estado_id(
            cols: 6,con_registros:  true,id_selected:  $this->registro['dp_estado_nacimiento_id'],
            link:  $this->link, label: 'Estado Nac', name: 'dp_estado_nacimiento_id');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar sl_dp_estado_nacimiento_id',
                data:  $sl_dp_estado_nacimiento_id,header: $header,ws: $ws);
        }

        $filtro = array('dp_estado.id'=>$this->registro['dp_estado_nacimiento_id']);
        $this->inputs->dp_estado_nacimiento_id = $sl_dp_estado_nacimiento_id;

        $sl_dp_municipio_nacimiento_id = (new dp_municipio_html(html: $this->html_base))->select_dp_municipio_id(
            cols: 6, con_registros: true, id_selected: $this->registro['dp_municipio_nacimiento_id'],
            link: $this->link, filtro: $filtro, label: 'Municipio Nac', name: 'dp_municipio_nacimiento_id');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar sl_dp_municipio_nacimiento_id',
                data:  $sl_dp_municipio_nacimiento_id, header: $header,ws: $ws);
        }

        $this->inputs->dp_municipio_nacimiento_id = $sl_dp_municipio_nacimiento_id;

        $fecha_nacimiento = $this->html->input_fecha(cols: 12,row_upd: $this->row_upd,value_vacio:  false,
            value: $this->row_upd->fecha_nacimiento);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar fecha_nacimiento',
                data:  $fecha_nacimiento, header: $header,ws: $ws);
        }

        $this->inputs->fecha_nacimiento = $fecha_nacimiento;

        $btn_collapse_all = $this->html->button_para_java(id_css: 'collapse_all',style:  'primary',
            tag:  'Ver/Ocultar Todo');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al btn_collapse_all',data:  $btn_collapse_all, header: $header,ws:  $ws);
        }

        $this->buttons['btn_collapse_all'] = $btn_collapse_all;


        $inm_referencias = (new inm_referencia(link: $this->link))->inm_referencias(inm_comprador_id: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inm_referencias',data:  $inm_referencias, header: $header,ws:  $ws);
        }

        $this->inm_referencias = $inm_referencias;


        $inm_referencias_html = (new inm_referencia_html(html: $this->html_base))->inm_referencias(
            inm_referencias_data: $inm_referencias,link: $this->link);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar referencia',data:  $inm_referencias_html, header: $header,ws:  $ws);
        }

        $this->inputs->inm_referencias = $inm_referencias_html;


        $co_acreditados = (new inm_comprador(link: $this->link))->get_co_acreditados(inm_comprador_id: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener co_acreditados',data:  $co_acreditados, header: $header,ws:  $ws);
        }

        $inm_co_acreditado = new stdClass();
        if(count($co_acreditados) === 1){
            $inm_co_acreditado = (object)$co_acreditados[0];
        }


        $headers = (new \gamboamartin\inmuebles\controllers\_inm_comprador())->frontend_co_acreditado(controler: $this,
            row_upd: $inm_co_acreditado);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al integrar headers',data:  $headers, header: $header,ws:  $ws);
        }

        $button_upd = $this->html->boton_submit(class_button: 'modifica', class_control: 'btn-modifica',
            style: 'success', tag: 'Modifica', id_button: 'btn_modifica');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar button_upd',data:  $button_upd, header: $header,ws:  $ws);
        }

        $this->btn = $button_upd;


        $boton_edit_1 = $this->html->button_para_java(id_css: 'edit_ref_1',style: 'success',tag: 'Edita');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar boton_edit_1',data:  $boton_edit_1, header: $header,ws:  $ws);
        }

        $this->buttons['edita_ref_1'] = $boton_edit_1;

        $boton_edit_2 = $this->html->button_para_java(id_css: 'edit_ref_2',style: 'success',tag: 'Edita');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar boton_edit_2',data:  $boton_edit_2, header: $header,ws:  $ws);
        }

        $this->buttons['edita_ref_2'] = $boton_edit_2;

        $inm_prospecto_id = -1;
        $tiene_prospecto = (new inm_comprador(link: $this->link))->tiene_prospecto(inm_comprador_id: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al validar tiene prospecto',data:  $tiene_prospecto, header: $header,ws:  $ws);
        }

        if($tiene_prospecto){
            $inm_prospecto = (new inm_comprador(link: $this->link))->inm_prospecto(inm_comprador_id: $this->registro_id);
            if(errores::$error){
                return $this->retorno_error(
                    mensaje: 'Error al obtener prospecto',data:  $inm_prospecto, header: $header,ws:  $ws);
            }
            $inm_prospecto_id = $inm_prospecto->inm_prospecto_id;
        }


        $controlador_inm_prospecto = (new controlador_inm_prospecto(link: $this->link));
        $controlador_inm_prospecto->registro_id = $inm_prospecto_id;

        $class_upd = '_upd_prospecto';
        $conyuge = (new _conyuge())->inputs_conyuge(controler: $controlador_inm_prospecto,class_upd:$class_upd );
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener conyuge',data:  $conyuge,
                header: $header,ws:  $ws);
        }

        $this->inputs->conyuge = $conyuge;

        $beneficiario = (new _beneficiario())->inputs_beneficiario(controler: $controlador_inm_prospecto);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener beneficiario',data:  $beneficiario,
                header: $header,ws:  $ws);
        }

        $this->inputs->beneficiario = $beneficiario;

        $filtro_ben['inm_prospecto.id'] = $inm_prospecto_id;
        $r_inm_beneficiario = (new inm_beneficiario(link: $this->link))->filtro_and(filtro: $filtro_ben);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener beneficiarios',data:  $r_inm_beneficiario,
                header: $header,ws:  $ws);
        }

        $params = (new _inm_prospecto())->params_btn(accion_retorno: __FUNCTION__,
            registro_id:  $this->registro_id,seccion_retorno:  $this->tabla);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener params',data:  $params,
                header: $header,ws:  $ws);
        }

        $beneficiarios = $r_inm_beneficiario->registros;

        $beneficiarios = (new _inm_prospecto())->rows(controlador: $controlador_inm_prospecto,
            datas: $beneficiarios,params:  $params, seccion_exe: 'inm_beneficiario');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener beneficiarios link del',data:  $beneficiarios,
                header: $header,ws:  $ws);
        }

        $this->beneficiarios = $beneficiarios;

        $referencia = (new _referencia())->inputs_referencia(controler: $controlador_inm_prospecto);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener referencias',data:  $referencia,
                header: $header,ws:  $ws);
        }
        $this->inputs->referencia = $referencia;

        $r_inm_referencia_prospecto = (new inm_referencia_prospecto(link: $this->link))->filtro_and(filtro: $filtro_ben);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener referencia_prospectos',data:  $r_inm_referencia_prospecto,
                header: $header,ws:  $ws);
        }

        $params = (new _inm_prospecto())->params_btn(accion_retorno: __FUNCTION__,
            registro_id:  $this->registro_id,seccion_retorno:  $this->tabla);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener params',data:  $params,
                header: $header,ws:  $ws);
        }

        $referencia_prospectos = $r_inm_referencia_prospecto->registros;

        $referencia_prospectos = (new _inm_prospecto())->rows(controlador: $controlador_inm_prospecto,
            datas: $referencia_prospectos,params:  $params, seccion_exe: 'inm_referencia_prospecto');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener beneficiarios link del',data:  $referencia_prospectos,
                header: $header,ws:  $ws);
        }

        $this->referencias = $referencia_prospectos;




        return $r_modifica;
    }

    public function modifica_bd(bool $header, bool $ws): array|stdClass
    {
        $this->link->beginTransaction();

        $tiene_prospecto = (new inm_comprador(link: $this->link))->tiene_prospecto(inm_comprador_id: $this->registro_id);
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al validar inm_prospecto',data:  $tiene_prospecto, header: $header,ws:  $ws);
        }
        if($tiene_prospecto) {
            $inm_prospecto = (new inm_comprador(link: $this->link))->inm_prospecto(inm_comprador_id: $this->registro_id);
            if (errores::$error) {
                $this->link->rollBack();
                return $this->retorno_error(mensaje: 'Error al obtener inm_prospecto', data: $inm_prospecto, header: $header, ws: $ws);
            }

            $result_conyuge =  (new _upd_prospecto())->transacciona_conyuge(inm_prospecto_id: $inm_prospecto->inm_prospecto_id,link: $this->link);
            if (errores::$error) {
                $this->link->rollBack();
                return $this->retorno_error(mensaje: 'Error al insertar conyuge', data: $result_conyuge,
                    header: $header, ws: $ws);
            }

            $result_beneficiario = (new _upd_prospecto())->transacciona_beneficiario(inm_prospecto_id: $inm_prospecto->inm_prospecto_id,link: $this->link);
            if (errores::$error) {
                return $this->retorno_error(mensaje: 'Error al insertar beneficiario', data: $result_beneficiario,
                    header: $header, ws: $ws);
            }

            $result_referencia = (new _upd_prospecto())->transacciona_referencia(inm_prospecto_id:  $inm_prospecto->inm_prospecto_id,link: $this->link);
            if (errores::$error) {
                return $this->retorno_error(mensaje: 'Error al insertar referencia', data: $result_referencia,
                    header: $header, ws: $ws);
            }
        }
        else{
            if(isset($_POST['conyuge'])){
                unset($_POST['conyuge']);
            }
            if(isset($_POST['beneficiario'])){
                unset($_POST['beneficiario']);
            }
            if(isset($_POST['referencia'])){
                unset($_POST['referencia']);
            }
        }


        $r_modifica = parent::modifica_bd(header: false,ws:  $ws); // TODO: Change the autogenerated stub
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al modificar inm_prospecto',data:  $r_modifica,
                header: $header,ws:  $ws);
        }
        $this->link->commit();

        $_SESSION[$r_modifica->salida][]['mensaje'] = $r_modifica->mensaje.' del id '.$this->registro_id;
        $this->header_out(result: $r_modifica, header: $header,ws:  $ws);

        return $r_modifica;


    }

    public function solicitud_avaluo(bool $header, bool $ws = false)
    {

        $pdf = new Fpdi();
        $_pdf = new _pdf(pdf: $pdf);

        $pdf_exe = $_pdf->solicitud_avaluo(inm_comprador_id: $this->registro_id,path_base:  $this->path_base,
            modelo:  $this->modelo);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al escribir en pdf', data: $pdf_exe, header: $header, ws: $ws);
        }

        exit;
    }


    public function solicitud_infonavit(bool $header, bool $ws = false)
    {

        $pdf = new Fpdi();
        $_pdf = new _pdf(pdf: $pdf);

        $pdf_exe = $_pdf->solicitud_infonavit(inm_comprador_id: $this->registro_id,path_base:  $this->path_base,
            modelo:  $this->modelo);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al escribir en pdf', data: $pdf_exe, header: $header, ws: $ws);
        }

        exit;
    }

    final public function subir_documento(bool $header, bool $ws = false){

        $this->inputs = new stdClass();

        $filtro['inm_comprador.id'] = $this->registro_id;
        $inm_comprador_id = (new inm_comprador_html(html: $this->html_base))->select_inm_comprador_id(
            cols: 12,con_registros:  true,id_selected:  $this->registro_id,link:  $this->link,filtro: $filtro);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar input', data: $inm_comprador_id, header: $header, ws: $ws);
        }
        $this->inputs->inm_comprador_id = $inm_comprador_id;

        $doc_tipos_documentos = (new _doctos())->documentos_de_comprador(inm_comprador_id: $this->registro_id,
            link: $this->link, todos: false);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener tipos de documento', data: $doc_tipos_documentos,
                header: $header, ws: $ws);
        }

        $_doc_tipo_documento_id = -1;
        $filtro = array();
        if(isset($_GET['doc_tipo_documento_id'])){
            $_doc_tipo_documento_id = $_GET['doc_tipo_documento_id'];
            $filtro['doc_tipo_documento.id'] = $_GET['doc_tipo_documento_id'];
        }

        $doc_tipo_documento_id = (new doc_tipo_documento_html(html: $this->html_base))->select_doc_tipo_documento_id(
            cols: 12, con_registros: true, id_selected: $_doc_tipo_documento_id, link: $this->link, filtro: $filtro,
            registros: $doc_tipos_documentos);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar input', data: $inm_comprador_id, header: $header, ws: $ws);
        }
        $this->inputs->doc_tipo_documento_id = $doc_tipo_documento_id;

        $documento = $this->html->input_file(cols: 12,name:  'documento',row_upd:  new stdClass(),value_vacio:  false);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $documento, header: $header,ws:  $ws);
        }

        $this->inputs->documento = $documento;

        $link_alta_doc = $this->obj_link->link_alta_bd(link:  $this->link,seccion:  'inm_doc_comprador');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar link',data:  $link_alta_doc, header: $header,ws:  $ws);
        }

        $this->link_inm_doc_comprador_alta_bd = $link_alta_doc;

        $btn_action_next = $this->html->hidden('btn_action_next',value: 'documentos');
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar btn_action_next',data:  $btn_action_next, header: $header,ws:  $ws);
        }

        $id_retorno = $this->html->hidden('id_retorno',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar btn_action_next',data:  $btn_action_next, header: $header,ws:  $ws);
        }

        $seccion_retorno = $this->html->hidden('seccion_retorno',value: $this->seccion);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar btn_action_next',data:  $btn_action_next, header: $header,ws:  $ws);
        }

        $this->inputs->btn_action_next = $btn_action_next;
        $this->inputs->id_retorno = $id_retorno;
        $this->inputs->seccion_retorno = $seccion_retorno;


    }


    public function asigna_comision(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }

        $registro = $this->modelo->registro(registro_id: $this->registro_id,retorno_obj: true);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }

        $keys_selects = (new _keys_selects())->key_selects_asigna_ubicacion(controler: $this);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }


        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }


        $hiddens = (new _keys_selects())->hiddens(controler: $this,funcion: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs',data:  $hiddens,
                header: $header,ws:  $ws);
        }

        $inputs = (new _keys_selects())->inputs_form_base(btn_action_next: $hiddens->btn_action_next,
            controler: $this, id_retorno: $hiddens->id_retorno, in_registro_id: $hiddens->in_registro_id,
            inm_comprador_id: $inm_comprador_id, inm_ubicacion_id: '', precio_operacion: $hiddens->precio_operacion,
            seccion_retorno: $hiddens->seccion_retorno);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener inputs_hidden',data:  $inputs, header: $header,ws:  $ws);
        }



        $extra_params_keys[] = 'inm_ubicacion_precio';
        $ubicaciones_con_precio = (new inm_ubicacion(link: $this->link))->ubicaciones_con_precio(etapa: 'ALTA',
            inm_comprador_id:  $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener ubicaciones con precio',data:  $ubicaciones_con_precio,
                header: $header,ws:  $ws);
        }

        $inm_ubicacion_id = (new _inm_comprador())->inm_ubicacion_id_input(controler: $this,
            extra_params_keys: $extra_params_keys, registros: $ubicaciones_con_precio);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al inm_ubicacion_id',data:  $inm_ubicacion_id,
                header: $header,ws:  $ws);
        }

        $this->inputs->inm_ubicacion_id = $inm_ubicacion_id;

        $link_rel_ubi_comp_alta_bd = $this->obj_link->link_alta_bd(link: $this->link,seccion: 'inm_rel_ubi_comp');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_rel_ubi_comp_alta_bd,
                header: $header,ws:  $ws);
        }

        $this->link_rel_ubi_comp_alta_bd = $link_rel_ubi_comp_alta_bd;

        $inm_ubicaciones = (new _inm_comprador())->inm_ubicaciones(inm_comprador_id: $this->registro_id,
            link:  $this->link);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener compradores',data:  $inm_ubicaciones,
                header: $header,ws:  $ws);
        }

        $this->inm_ubicaciones = $inm_ubicaciones;

        return $r_modifica;
    }


}
